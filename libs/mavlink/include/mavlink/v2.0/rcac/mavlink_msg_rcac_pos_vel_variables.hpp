// MESSAGE RCAC_POS_VEL_VARIABLES support class

#pragma once

namespace mavlink {
namespace rcac {
namespace msg {

/**
 * @brief RCAC_POS_VEL_VARIABLES message
 *
 * Position controller RCAC variables
 */
struct RCAC_POS_VEL_VARIABLES : mavlink::Message {
    static constexpr msgid_t MSG_ID = 10002;
    static constexpr size_t LENGTH = 254;
    static constexpr size_t MIN_LENGTH = 254;
    static constexpr uint8_t CRC_EXTRA = 227;
    static constexpr auto NAME = "RCAC_POS_VEL_VARIABLES";


    uint64_t timestamp; /*<  Time since system start */
    std::array<float, 2> rcac_alpha; /*<  Test variable for RCAC logging */
    uint64_t ii_pos; /*<  iteration step of the RCAC Position Controller */
    uint8_t switch_pos; /*<  RCAC Position Controller switch */
    std::array<float, 3> rcac_pos_z; /*<  Performance variable for the Position Controller */
    std::array<float, 3> rcac_pos_u; /*<  Control generated by the Position Controller */
    std::array<float, 3> rcac_pos_theta; /*<  P gains for the Position Controller */
    uint64_t ii_vel; /*<  iteration step of the RCAC Velocity Controller */
    uint8_t switch_vel; /*<  RCAC Velocity Controller switch */
    std::array<float, 3> rcac_vel_z; /*<  Performance variable for the Velocity Controller */
    std::array<float, 3> rcac_vel_u; /*<  Control generated by the Velocity Controller */
    std::array<float, 9> rcac_vel_theta; /*<  PID gains for the Velocity Controller */
    uint64_t ii_att; /*<  iteration step of the RCAC Attitude Controller */
    std::array<float, 3> rcac_att_z; /*<  Performance variable for the Attitude Controller */
    std::array<float, 3> rcac_att_u; /*<  Control generated by the Attitude Controller */
    std::array<float, 3> rcac_att_theta; /*<  P gains for the Attitude Controller */
    uint64_t ii_rate; /*<  iteration step of the RCAC Rate Controller */
    std::array<float, 3> rcac_rate_z; /*<  Performance variable for the Rate Controller */
    std::array<float, 3> rcac_rate_u; /*<  Control generated by the Rate Controller */
    std::array<float, 12> rcac_rate_theta; /*<  PID+FF gains for the Rate Controller */


    inline std::string get_name(void) const override
    {
            return NAME;
    }

    inline Info get_message_info(void) const override
    {
            return { MSG_ID, LENGTH, MIN_LENGTH, CRC_EXTRA };
    }

    inline std::string to_yaml(void) const override
    {
        std::stringstream ss;

        ss << NAME << ":" << std::endl;
        ss << "  timestamp: " << timestamp << std::endl;
        ss << "  rcac_alpha: [" << to_string(rcac_alpha) << "]" << std::endl;
        ss << "  ii_pos: " << ii_pos << std::endl;
        ss << "  switch_pos: " << +switch_pos << std::endl;
        ss << "  rcac_pos_z: [" << to_string(rcac_pos_z) << "]" << std::endl;
        ss << "  rcac_pos_u: [" << to_string(rcac_pos_u) << "]" << std::endl;
        ss << "  rcac_pos_theta: [" << to_string(rcac_pos_theta) << "]" << std::endl;
        ss << "  ii_vel: " << ii_vel << std::endl;
        ss << "  switch_vel: " << +switch_vel << std::endl;
        ss << "  rcac_vel_z: [" << to_string(rcac_vel_z) << "]" << std::endl;
        ss << "  rcac_vel_u: [" << to_string(rcac_vel_u) << "]" << std::endl;
        ss << "  rcac_vel_theta: [" << to_string(rcac_vel_theta) << "]" << std::endl;
        ss << "  ii_att: " << ii_att << std::endl;
        ss << "  rcac_att_z: [" << to_string(rcac_att_z) << "]" << std::endl;
        ss << "  rcac_att_u: [" << to_string(rcac_att_u) << "]" << std::endl;
        ss << "  rcac_att_theta: [" << to_string(rcac_att_theta) << "]" << std::endl;
        ss << "  ii_rate: " << ii_rate << std::endl;
        ss << "  rcac_rate_z: [" << to_string(rcac_rate_z) << "]" << std::endl;
        ss << "  rcac_rate_u: [" << to_string(rcac_rate_u) << "]" << std::endl;
        ss << "  rcac_rate_theta: [" << to_string(rcac_rate_theta) << "]" << std::endl;

        return ss.str();
    }

    inline void serialize(mavlink::MsgMap &map) const override
    {
        map.reset(MSG_ID, LENGTH);

        map << timestamp;                     // offset: 0
        map << ii_pos;                        // offset: 8
        map << ii_vel;                        // offset: 16
        map << ii_att;                        // offset: 24
        map << ii_rate;                       // offset: 32
        map << rcac_alpha;                    // offset: 40
        map << rcac_pos_z;                    // offset: 48
        map << rcac_pos_u;                    // offset: 60
        map << rcac_pos_theta;                // offset: 72
        map << rcac_vel_z;                    // offset: 84
        map << rcac_vel_u;                    // offset: 96
        map << rcac_vel_theta;                // offset: 108
        map << rcac_att_z;                    // offset: 144
        map << rcac_att_u;                    // offset: 156
        map << rcac_att_theta;                // offset: 168
        map << rcac_rate_z;                   // offset: 180
        map << rcac_rate_u;                   // offset: 192
        map << rcac_rate_theta;               // offset: 204
        map << switch_pos;                    // offset: 252
        map << switch_vel;                    // offset: 253
    }

    inline void deserialize(mavlink::MsgMap &map) override
    {
        map >> timestamp;                     // offset: 0
        map >> ii_pos;                        // offset: 8
        map >> ii_vel;                        // offset: 16
        map >> ii_att;                        // offset: 24
        map >> ii_rate;                       // offset: 32
        map >> rcac_alpha;                    // offset: 40
        map >> rcac_pos_z;                    // offset: 48
        map >> rcac_pos_u;                    // offset: 60
        map >> rcac_pos_theta;                // offset: 72
        map >> rcac_vel_z;                    // offset: 84
        map >> rcac_vel_u;                    // offset: 96
        map >> rcac_vel_theta;                // offset: 108
        map >> rcac_att_z;                    // offset: 144
        map >> rcac_att_u;                    // offset: 156
        map >> rcac_att_theta;                // offset: 168
        map >> rcac_rate_z;                   // offset: 180
        map >> rcac_rate_u;                   // offset: 192
        map >> rcac_rate_theta;               // offset: 204
        map >> switch_pos;                    // offset: 252
        map >> switch_vel;                    // offset: 253
    }
};

} // namespace msg
} // namespace rcac
} // namespace mavlink
