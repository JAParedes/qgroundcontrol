#pragma once
// MESSAGE RCAC_ATT_RATE_VARIABLES PACKING

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES 10001


typedef struct __mavlink_rcac_att_rate_variables_t {
 uint64_t timestamp; /*<  Time since system start*/
 uint64_t ii_att; /*<  iteration step of the RCAC Attitude Controller*/
 uint64_t ii_rate; /*<  iteration step of the RCAC Rate Controller*/
 float alpha_pid_att; /*<  Gain multiplied by the PID attitude gains*/
 float rcac_att_z_0; /*<  Performance variable for the Attitude Controller 0*/
 float rcac_att_z_1; /*<  Performance variable for the Attitude Controller 1*/
 float rcac_att_z_2; /*<  Performance variable for the Attitude Controller 2*/
 float rcac_att_u_0; /*<  Control generated by the Attitude Controller 0*/
 float rcac_att_u_1; /*<  Control generated by the Attitude Controller 1*/
 float rcac_att_u_2; /*<  Control generated by the Attitude Controller 2*/
 float rcac_att_theta_0; /*<  P gains for the Attitude Controller 0*/
 float rcac_att_theta_1; /*<  P gains for the Attitude Controller 1*/
 float rcac_att_theta_2; /*<  P gains for the Attitude Controller 2*/
 float alpha_pid_rate; /*<  Gain multiplied by the PID rate gains*/
 float rcac_rate_z_0; /*<  Performance variable for the Rate Controller 0*/
 float rcac_rate_z_1; /*<  Performance variable for the Rate Controller 1*/
 float rcac_rate_z_2; /*<  Performance variable for the Rate Controller 2*/
 float rcac_rate_u_0; /*<  Control generated by the Rate Controller 0*/
 float rcac_rate_u_1; /*<  Control generated by the Rate Controller 1*/
 float rcac_rate_u_2; /*<  Control generated by the Rate Controller 2*/
 float rcac_rate_theta_0; /*<  PID+FF gains for the Rate Controller 0*/
 float rcac_rate_theta_1; /*<  PID+FF gains for the Rate Controller 1*/
 float rcac_rate_theta_2; /*<  PID+FF gains for the Rate Controller 2*/
 float rcac_rate_theta_3; /*<  PID+FF gains for the Rate Controller 3*/
 float rcac_rate_theta_4; /*<  PID+FF gains for the Rate Controller 4*/
 float rcac_rate_theta_5; /*<  PID+FF gains for the Rate Controller 5*/
 float rcac_rate_theta_6; /*<  PID+FF gains for the Rate Controller 6*/
 float rcac_rate_theta_7; /*<  PID+FF gains for the Rate Controller 7*/
 float rcac_rate_theta_8; /*<  PID+FF gains for the Rate Controller 8*/
 float rcac_rate_theta_9; /*<  PID+FF gains for the Rate Controller 9*/
 float rcac_rate_theta_10; /*<  PID+FF gains for the Rate Controller 10*/
 float rcac_rate_theta_11; /*<  PID+FF gains for the Rate Controller 11*/
 float px4_att_theta_0; /*<  P gains for the PX4 Attitude Controller 0*/
 float px4_att_theta_1; /*<  P gains for the PX4 Attitude Controller 1*/
 float px4_att_theta_2; /*<  P gains for the PX4 Attitude Controller 2*/
 float px4_rate_theta_0; /*<  P gains for the PX4 Rate Controller 0*/
 float px4_rate_theta_1; /*<  P gains for the PX4 Rate Controller 1*/
 float px4_rate_theta_2; /*<  P gains for the PX4 Rate Controller 2*/
 float px4_rate_theta_3; /*<  P gains for the PX4 Rate Controller 3*/
 float px4_rate_theta_4; /*<  P gains for the PX4 Rate Controller 4*/
 float px4_rate_theta_5; /*<  P gains for the PX4 Rate Controller 5*/
 float px4_rate_theta_6; /*<  P gains for the PX4 Rate Controller 6*/
 float px4_rate_theta_7; /*<  P gains for the PX4 Rate Controller 7*/
 float px4_rate_theta_8; /*<  P gains for the PX4 Rate Controller 8*/
 float px4_rate_theta_9; /*<  P gains for the PX4 Rate Controller 9*/
 float px4_rate_theta_10; /*<  P gains for the PX4 Rate Controller 10*/
 float px4_rate_theta_11; /*<  P gains for the PX4 Rate Controller 11*/
 float p11_att; /*<  P(1,1) of the RCAC Attitude Controller*/
 float p11_ratex; /*<  P(1,1) of the RCAC Rate Controller*/
 uint8_t switch_att; /*<  RCAC Att Controller switch*/
 uint8_t switch_rate; /*<  RCAC Rate Controller switch*/
} mavlink_rcac_att_rate_variables_t;

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN 210
#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN 210
#define MAVLINK_MSG_ID_10001_LEN 210
#define MAVLINK_MSG_ID_10001_MIN_LEN 210

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC 99
#define MAVLINK_MSG_ID_10001_CRC 99



#if MAVLINK_COMMAND_24BIT
#define MAVLINK_MESSAGE_INFO_RCAC_ATT_RATE_VARIABLES { \
    10001, \
    "RCAC_ATT_RATE_VARIABLES", \
    51, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_att_rate_variables_t, timestamp) }, \
         { "ii_att", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_att_rate_variables_t, ii_att) }, \
         { "switch_att", NULL, MAVLINK_TYPE_UINT8_T, 0, 208, offsetof(mavlink_rcac_att_rate_variables_t, switch_att) }, \
         { "alpha_pid_att", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_rcac_att_rate_variables_t, alpha_pid_att) }, \
         { "rcac_att_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_0) }, \
         { "rcac_att_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_1) }, \
         { "rcac_att_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_2) }, \
         { "rcac_att_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_0) }, \
         { "rcac_att_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_1) }, \
         { "rcac_att_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_2) }, \
         { "rcac_att_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_0) }, \
         { "rcac_att_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_1) }, \
         { "rcac_att_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_2) }, \
         { "ii_rate", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_att_rate_variables_t, ii_rate) }, \
         { "switch_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 209, offsetof(mavlink_rcac_att_rate_variables_t, switch_rate) }, \
         { "alpha_pid_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_rcac_att_rate_variables_t, alpha_pid_rate) }, \
         { "rcac_rate_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_0) }, \
         { "rcac_rate_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_1) }, \
         { "rcac_rate_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_2) }, \
         { "rcac_rate_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_0) }, \
         { "rcac_rate_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 84, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_1) }, \
         { "rcac_rate_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 88, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_2) }, \
         { "rcac_rate_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 92, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_0) }, \
         { "rcac_rate_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 96, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_1) }, \
         { "rcac_rate_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 100, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_2) }, \
         { "rcac_rate_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 104, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_3) }, \
         { "rcac_rate_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 108, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_4) }, \
         { "rcac_rate_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 112, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_5) }, \
         { "rcac_rate_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 116, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_6) }, \
         { "rcac_rate_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 120, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_7) }, \
         { "rcac_rate_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 124, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_8) }, \
         { "rcac_rate_theta_9", NULL, MAVLINK_TYPE_FLOAT, 0, 128, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_9) }, \
         { "rcac_rate_theta_10", NULL, MAVLINK_TYPE_FLOAT, 0, 132, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_10) }, \
         { "rcac_rate_theta_11", NULL, MAVLINK_TYPE_FLOAT, 0, 136, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_11) }, \
         { "px4_att_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 140, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_0) }, \
         { "px4_att_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 144, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_1) }, \
         { "px4_att_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 148, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_2) }, \
         { "px4_rate_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 152, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_0) }, \
         { "px4_rate_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 156, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_1) }, \
         { "px4_rate_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 160, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_2) }, \
         { "px4_rate_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 164, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_3) }, \
         { "px4_rate_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 168, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_4) }, \
         { "px4_rate_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 172, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_5) }, \
         { "px4_rate_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 176, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_6) }, \
         { "px4_rate_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 180, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_7) }, \
         { "px4_rate_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 184, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_8) }, \
         { "px4_rate_theta_9", NULL, MAVLINK_TYPE_FLOAT, 0, 188, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_9) }, \
         { "px4_rate_theta_10", NULL, MAVLINK_TYPE_FLOAT, 0, 192, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_10) }, \
         { "px4_rate_theta_11", NULL, MAVLINK_TYPE_FLOAT, 0, 196, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_11) }, \
         { "p11_att", NULL, MAVLINK_TYPE_FLOAT, 0, 200, offsetof(mavlink_rcac_att_rate_variables_t, p11_att) }, \
         { "p11_ratex", NULL, MAVLINK_TYPE_FLOAT, 0, 204, offsetof(mavlink_rcac_att_rate_variables_t, p11_ratex) }, \
         } \
}
#else
#define MAVLINK_MESSAGE_INFO_RCAC_ATT_RATE_VARIABLES { \
    "RCAC_ATT_RATE_VARIABLES", \
    51, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_att_rate_variables_t, timestamp) }, \
         { "ii_att", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_att_rate_variables_t, ii_att) }, \
         { "switch_att", NULL, MAVLINK_TYPE_UINT8_T, 0, 208, offsetof(mavlink_rcac_att_rate_variables_t, switch_att) }, \
         { "alpha_pid_att", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_rcac_att_rate_variables_t, alpha_pid_att) }, \
         { "rcac_att_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_0) }, \
         { "rcac_att_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_1) }, \
         { "rcac_att_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z_2) }, \
         { "rcac_att_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_0) }, \
         { "rcac_att_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_1) }, \
         { "rcac_att_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u_2) }, \
         { "rcac_att_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_0) }, \
         { "rcac_att_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_1) }, \
         { "rcac_att_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta_2) }, \
         { "ii_rate", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_att_rate_variables_t, ii_rate) }, \
         { "switch_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 209, offsetof(mavlink_rcac_att_rate_variables_t, switch_rate) }, \
         { "alpha_pid_rate", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_rcac_att_rate_variables_t, alpha_pid_rate) }, \
         { "rcac_rate_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_0) }, \
         { "rcac_rate_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_1) }, \
         { "rcac_rate_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z_2) }, \
         { "rcac_rate_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_0) }, \
         { "rcac_rate_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 84, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_1) }, \
         { "rcac_rate_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 88, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u_2) }, \
         { "rcac_rate_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 92, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_0) }, \
         { "rcac_rate_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 96, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_1) }, \
         { "rcac_rate_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 100, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_2) }, \
         { "rcac_rate_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 104, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_3) }, \
         { "rcac_rate_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 108, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_4) }, \
         { "rcac_rate_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 112, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_5) }, \
         { "rcac_rate_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 116, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_6) }, \
         { "rcac_rate_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 120, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_7) }, \
         { "rcac_rate_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 124, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_8) }, \
         { "rcac_rate_theta_9", NULL, MAVLINK_TYPE_FLOAT, 0, 128, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_9) }, \
         { "rcac_rate_theta_10", NULL, MAVLINK_TYPE_FLOAT, 0, 132, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_10) }, \
         { "rcac_rate_theta_11", NULL, MAVLINK_TYPE_FLOAT, 0, 136, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta_11) }, \
         { "px4_att_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 140, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_0) }, \
         { "px4_att_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 144, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_1) }, \
         { "px4_att_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 148, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta_2) }, \
         { "px4_rate_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 152, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_0) }, \
         { "px4_rate_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 156, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_1) }, \
         { "px4_rate_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 160, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_2) }, \
         { "px4_rate_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 164, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_3) }, \
         { "px4_rate_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 168, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_4) }, \
         { "px4_rate_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 172, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_5) }, \
         { "px4_rate_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 176, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_6) }, \
         { "px4_rate_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 180, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_7) }, \
         { "px4_rate_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 184, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_8) }, \
         { "px4_rate_theta_9", NULL, MAVLINK_TYPE_FLOAT, 0, 188, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_9) }, \
         { "px4_rate_theta_10", NULL, MAVLINK_TYPE_FLOAT, 0, 192, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_10) }, \
         { "px4_rate_theta_11", NULL, MAVLINK_TYPE_FLOAT, 0, 196, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta_11) }, \
         { "p11_att", NULL, MAVLINK_TYPE_FLOAT, 0, 200, offsetof(mavlink_rcac_att_rate_variables_t, p11_att) }, \
         { "p11_ratex", NULL, MAVLINK_TYPE_FLOAT, 0, 204, offsetof(mavlink_rcac_att_rate_variables_t, p11_ratex) }, \
         } \
}
#endif

/**
 * @brief Pack a rcac_att_rate_variables message
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 *
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param alpha_pid_att  Gain multiplied by the PID attitude gains
 * @param rcac_att_z_0  Performance variable for the Attitude Controller 0
 * @param rcac_att_z_1  Performance variable for the Attitude Controller 1
 * @param rcac_att_z_2  Performance variable for the Attitude Controller 2
 * @param rcac_att_u_0  Control generated by the Attitude Controller 0
 * @param rcac_att_u_1  Control generated by the Attitude Controller 1
 * @param rcac_att_u_2  Control generated by the Attitude Controller 2
 * @param rcac_att_theta_0  P gains for the Attitude Controller 0
 * @param rcac_att_theta_1  P gains for the Attitude Controller 1
 * @param rcac_att_theta_2  P gains for the Attitude Controller 2
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param alpha_pid_rate  Gain multiplied by the PID rate gains
 * @param rcac_rate_z_0  Performance variable for the Rate Controller 0
 * @param rcac_rate_z_1  Performance variable for the Rate Controller 1
 * @param rcac_rate_z_2  Performance variable for the Rate Controller 2
 * @param rcac_rate_u_0  Control generated by the Rate Controller 0
 * @param rcac_rate_u_1  Control generated by the Rate Controller 1
 * @param rcac_rate_u_2  Control generated by the Rate Controller 2
 * @param rcac_rate_theta_0  PID+FF gains for the Rate Controller 0
 * @param rcac_rate_theta_1  PID+FF gains for the Rate Controller 1
 * @param rcac_rate_theta_2  PID+FF gains for the Rate Controller 2
 * @param rcac_rate_theta_3  PID+FF gains for the Rate Controller 3
 * @param rcac_rate_theta_4  PID+FF gains for the Rate Controller 4
 * @param rcac_rate_theta_5  PID+FF gains for the Rate Controller 5
 * @param rcac_rate_theta_6  PID+FF gains for the Rate Controller 6
 * @param rcac_rate_theta_7  PID+FF gains for the Rate Controller 7
 * @param rcac_rate_theta_8  PID+FF gains for the Rate Controller 8
 * @param rcac_rate_theta_9  PID+FF gains for the Rate Controller 9
 * @param rcac_rate_theta_10  PID+FF gains for the Rate Controller 10
 * @param rcac_rate_theta_11  PID+FF gains for the Rate Controller 11
 * @param px4_att_theta_0  P gains for the PX4 Attitude Controller 0
 * @param px4_att_theta_1  P gains for the PX4 Attitude Controller 1
 * @param px4_att_theta_2  P gains for the PX4 Attitude Controller 2
 * @param px4_rate_theta_0  P gains for the PX4 Rate Controller 0
 * @param px4_rate_theta_1  P gains for the PX4 Rate Controller 1
 * @param px4_rate_theta_2  P gains for the PX4 Rate Controller 2
 * @param px4_rate_theta_3  P gains for the PX4 Rate Controller 3
 * @param px4_rate_theta_4  P gains for the PX4 Rate Controller 4
 * @param px4_rate_theta_5  P gains for the PX4 Rate Controller 5
 * @param px4_rate_theta_6  P gains for the PX4 Rate Controller 6
 * @param px4_rate_theta_7  P gains for the PX4 Rate Controller 7
 * @param px4_rate_theta_8  P gains for the PX4 Rate Controller 8
 * @param px4_rate_theta_9  P gains for the PX4 Rate Controller 9
 * @param px4_rate_theta_10  P gains for the PX4 Rate Controller 10
 * @param px4_rate_theta_11  P gains for the PX4 Rate Controller 11
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, float alpha_pid_att, float rcac_att_z_0, float rcac_att_z_1, float rcac_att_z_2, float rcac_att_u_0, float rcac_att_u_1, float rcac_att_u_2, float rcac_att_theta_0, float rcac_att_theta_1, float rcac_att_theta_2, uint64_t ii_rate, uint8_t switch_rate, float alpha_pid_rate, float rcac_rate_z_0, float rcac_rate_z_1, float rcac_rate_z_2, float rcac_rate_u_0, float rcac_rate_u_1, float rcac_rate_u_2, float rcac_rate_theta_0, float rcac_rate_theta_1, float rcac_rate_theta_2, float rcac_rate_theta_3, float rcac_rate_theta_4, float rcac_rate_theta_5, float rcac_rate_theta_6, float rcac_rate_theta_7, float rcac_rate_theta_8, float rcac_rate_theta_9, float rcac_rate_theta_10, float rcac_rate_theta_11, float px4_att_theta_0, float px4_att_theta_1, float px4_att_theta_2, float px4_rate_theta_0, float px4_rate_theta_1, float px4_rate_theta_2, float px4_rate_theta_3, float px4_rate_theta_4, float px4_rate_theta_5, float px4_rate_theta_6, float px4_rate_theta_7, float px4_rate_theta_8, float px4_rate_theta_9, float px4_rate_theta_10, float px4_rate_theta_11, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 24, alpha_pid_att);
    _mav_put_float(buf, 28, rcac_att_z_0);
    _mav_put_float(buf, 32, rcac_att_z_1);
    _mav_put_float(buf, 36, rcac_att_z_2);
    _mav_put_float(buf, 40, rcac_att_u_0);
    _mav_put_float(buf, 44, rcac_att_u_1);
    _mav_put_float(buf, 48, rcac_att_u_2);
    _mav_put_float(buf, 52, rcac_att_theta_0);
    _mav_put_float(buf, 56, rcac_att_theta_1);
    _mav_put_float(buf, 60, rcac_att_theta_2);
    _mav_put_float(buf, 64, alpha_pid_rate);
    _mav_put_float(buf, 68, rcac_rate_z_0);
    _mav_put_float(buf, 72, rcac_rate_z_1);
    _mav_put_float(buf, 76, rcac_rate_z_2);
    _mav_put_float(buf, 80, rcac_rate_u_0);
    _mav_put_float(buf, 84, rcac_rate_u_1);
    _mav_put_float(buf, 88, rcac_rate_u_2);
    _mav_put_float(buf, 92, rcac_rate_theta_0);
    _mav_put_float(buf, 96, rcac_rate_theta_1);
    _mav_put_float(buf, 100, rcac_rate_theta_2);
    _mav_put_float(buf, 104, rcac_rate_theta_3);
    _mav_put_float(buf, 108, rcac_rate_theta_4);
    _mav_put_float(buf, 112, rcac_rate_theta_5);
    _mav_put_float(buf, 116, rcac_rate_theta_6);
    _mav_put_float(buf, 120, rcac_rate_theta_7);
    _mav_put_float(buf, 124, rcac_rate_theta_8);
    _mav_put_float(buf, 128, rcac_rate_theta_9);
    _mav_put_float(buf, 132, rcac_rate_theta_10);
    _mav_put_float(buf, 136, rcac_rate_theta_11);
    _mav_put_float(buf, 140, px4_att_theta_0);
    _mav_put_float(buf, 144, px4_att_theta_1);
    _mav_put_float(buf, 148, px4_att_theta_2);
    _mav_put_float(buf, 152, px4_rate_theta_0);
    _mav_put_float(buf, 156, px4_rate_theta_1);
    _mav_put_float(buf, 160, px4_rate_theta_2);
    _mav_put_float(buf, 164, px4_rate_theta_3);
    _mav_put_float(buf, 168, px4_rate_theta_4);
    _mav_put_float(buf, 172, px4_rate_theta_5);
    _mav_put_float(buf, 176, px4_rate_theta_6);
    _mav_put_float(buf, 180, px4_rate_theta_7);
    _mav_put_float(buf, 184, px4_rate_theta_8);
    _mav_put_float(buf, 188, px4_rate_theta_9);
    _mav_put_float(buf, 192, px4_rate_theta_10);
    _mav_put_float(buf, 196, px4_rate_theta_11);
    _mav_put_float(buf, 200, p11_att);
    _mav_put_float(buf, 204, p11_ratex);
    _mav_put_uint8_t(buf, 208, switch_att);
    _mav_put_uint8_t(buf, 209, switch_rate);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.alpha_pid_att = alpha_pid_att;
    packet.rcac_att_z_0 = rcac_att_z_0;
    packet.rcac_att_z_1 = rcac_att_z_1;
    packet.rcac_att_z_2 = rcac_att_z_2;
    packet.rcac_att_u_0 = rcac_att_u_0;
    packet.rcac_att_u_1 = rcac_att_u_1;
    packet.rcac_att_u_2 = rcac_att_u_2;
    packet.rcac_att_theta_0 = rcac_att_theta_0;
    packet.rcac_att_theta_1 = rcac_att_theta_1;
    packet.rcac_att_theta_2 = rcac_att_theta_2;
    packet.alpha_pid_rate = alpha_pid_rate;
    packet.rcac_rate_z_0 = rcac_rate_z_0;
    packet.rcac_rate_z_1 = rcac_rate_z_1;
    packet.rcac_rate_z_2 = rcac_rate_z_2;
    packet.rcac_rate_u_0 = rcac_rate_u_0;
    packet.rcac_rate_u_1 = rcac_rate_u_1;
    packet.rcac_rate_u_2 = rcac_rate_u_2;
    packet.rcac_rate_theta_0 = rcac_rate_theta_0;
    packet.rcac_rate_theta_1 = rcac_rate_theta_1;
    packet.rcac_rate_theta_2 = rcac_rate_theta_2;
    packet.rcac_rate_theta_3 = rcac_rate_theta_3;
    packet.rcac_rate_theta_4 = rcac_rate_theta_4;
    packet.rcac_rate_theta_5 = rcac_rate_theta_5;
    packet.rcac_rate_theta_6 = rcac_rate_theta_6;
    packet.rcac_rate_theta_7 = rcac_rate_theta_7;
    packet.rcac_rate_theta_8 = rcac_rate_theta_8;
    packet.rcac_rate_theta_9 = rcac_rate_theta_9;
    packet.rcac_rate_theta_10 = rcac_rate_theta_10;
    packet.rcac_rate_theta_11 = rcac_rate_theta_11;
    packet.px4_att_theta_0 = px4_att_theta_0;
    packet.px4_att_theta_1 = px4_att_theta_1;
    packet.px4_att_theta_2 = px4_att_theta_2;
    packet.px4_rate_theta_0 = px4_rate_theta_0;
    packet.px4_rate_theta_1 = px4_rate_theta_1;
    packet.px4_rate_theta_2 = px4_rate_theta_2;
    packet.px4_rate_theta_3 = px4_rate_theta_3;
    packet.px4_rate_theta_4 = px4_rate_theta_4;
    packet.px4_rate_theta_5 = px4_rate_theta_5;
    packet.px4_rate_theta_6 = px4_rate_theta_6;
    packet.px4_rate_theta_7 = px4_rate_theta_7;
    packet.px4_rate_theta_8 = px4_rate_theta_8;
    packet.px4_rate_theta_9 = px4_rate_theta_9;
    packet.px4_rate_theta_10 = px4_rate_theta_10;
    packet.px4_rate_theta_11 = px4_rate_theta_11;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES;
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
}

/**
 * @brief Pack a rcac_att_rate_variables message on a channel
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param alpha_pid_att  Gain multiplied by the PID attitude gains
 * @param rcac_att_z_0  Performance variable for the Attitude Controller 0
 * @param rcac_att_z_1  Performance variable for the Attitude Controller 1
 * @param rcac_att_z_2  Performance variable for the Attitude Controller 2
 * @param rcac_att_u_0  Control generated by the Attitude Controller 0
 * @param rcac_att_u_1  Control generated by the Attitude Controller 1
 * @param rcac_att_u_2  Control generated by the Attitude Controller 2
 * @param rcac_att_theta_0  P gains for the Attitude Controller 0
 * @param rcac_att_theta_1  P gains for the Attitude Controller 1
 * @param rcac_att_theta_2  P gains for the Attitude Controller 2
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param alpha_pid_rate  Gain multiplied by the PID rate gains
 * @param rcac_rate_z_0  Performance variable for the Rate Controller 0
 * @param rcac_rate_z_1  Performance variable for the Rate Controller 1
 * @param rcac_rate_z_2  Performance variable for the Rate Controller 2
 * @param rcac_rate_u_0  Control generated by the Rate Controller 0
 * @param rcac_rate_u_1  Control generated by the Rate Controller 1
 * @param rcac_rate_u_2  Control generated by the Rate Controller 2
 * @param rcac_rate_theta_0  PID+FF gains for the Rate Controller 0
 * @param rcac_rate_theta_1  PID+FF gains for the Rate Controller 1
 * @param rcac_rate_theta_2  PID+FF gains for the Rate Controller 2
 * @param rcac_rate_theta_3  PID+FF gains for the Rate Controller 3
 * @param rcac_rate_theta_4  PID+FF gains for the Rate Controller 4
 * @param rcac_rate_theta_5  PID+FF gains for the Rate Controller 5
 * @param rcac_rate_theta_6  PID+FF gains for the Rate Controller 6
 * @param rcac_rate_theta_7  PID+FF gains for the Rate Controller 7
 * @param rcac_rate_theta_8  PID+FF gains for the Rate Controller 8
 * @param rcac_rate_theta_9  PID+FF gains for the Rate Controller 9
 * @param rcac_rate_theta_10  PID+FF gains for the Rate Controller 10
 * @param rcac_rate_theta_11  PID+FF gains for the Rate Controller 11
 * @param px4_att_theta_0  P gains for the PX4 Attitude Controller 0
 * @param px4_att_theta_1  P gains for the PX4 Attitude Controller 1
 * @param px4_att_theta_2  P gains for the PX4 Attitude Controller 2
 * @param px4_rate_theta_0  P gains for the PX4 Rate Controller 0
 * @param px4_rate_theta_1  P gains for the PX4 Rate Controller 1
 * @param px4_rate_theta_2  P gains for the PX4 Rate Controller 2
 * @param px4_rate_theta_3  P gains for the PX4 Rate Controller 3
 * @param px4_rate_theta_4  P gains for the PX4 Rate Controller 4
 * @param px4_rate_theta_5  P gains for the PX4 Rate Controller 5
 * @param px4_rate_theta_6  P gains for the PX4 Rate Controller 6
 * @param px4_rate_theta_7  P gains for the PX4 Rate Controller 7
 * @param px4_rate_theta_8  P gains for the PX4 Rate Controller 8
 * @param px4_rate_theta_9  P gains for the PX4 Rate Controller 9
 * @param px4_rate_theta_10  P gains for the PX4 Rate Controller 10
 * @param px4_rate_theta_11  P gains for the PX4 Rate Controller 11
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t timestamp,uint64_t ii_att,uint8_t switch_att,float alpha_pid_att,float rcac_att_z_0,float rcac_att_z_1,float rcac_att_z_2,float rcac_att_u_0,float rcac_att_u_1,float rcac_att_u_2,float rcac_att_theta_0,float rcac_att_theta_1,float rcac_att_theta_2,uint64_t ii_rate,uint8_t switch_rate,float alpha_pid_rate,float rcac_rate_z_0,float rcac_rate_z_1,float rcac_rate_z_2,float rcac_rate_u_0,float rcac_rate_u_1,float rcac_rate_u_2,float rcac_rate_theta_0,float rcac_rate_theta_1,float rcac_rate_theta_2,float rcac_rate_theta_3,float rcac_rate_theta_4,float rcac_rate_theta_5,float rcac_rate_theta_6,float rcac_rate_theta_7,float rcac_rate_theta_8,float rcac_rate_theta_9,float rcac_rate_theta_10,float rcac_rate_theta_11,float px4_att_theta_0,float px4_att_theta_1,float px4_att_theta_2,float px4_rate_theta_0,float px4_rate_theta_1,float px4_rate_theta_2,float px4_rate_theta_3,float px4_rate_theta_4,float px4_rate_theta_5,float px4_rate_theta_6,float px4_rate_theta_7,float px4_rate_theta_8,float px4_rate_theta_9,float px4_rate_theta_10,float px4_rate_theta_11,float p11_att,float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 24, alpha_pid_att);
    _mav_put_float(buf, 28, rcac_att_z_0);
    _mav_put_float(buf, 32, rcac_att_z_1);
    _mav_put_float(buf, 36, rcac_att_z_2);
    _mav_put_float(buf, 40, rcac_att_u_0);
    _mav_put_float(buf, 44, rcac_att_u_1);
    _mav_put_float(buf, 48, rcac_att_u_2);
    _mav_put_float(buf, 52, rcac_att_theta_0);
    _mav_put_float(buf, 56, rcac_att_theta_1);
    _mav_put_float(buf, 60, rcac_att_theta_2);
    _mav_put_float(buf, 64, alpha_pid_rate);
    _mav_put_float(buf, 68, rcac_rate_z_0);
    _mav_put_float(buf, 72, rcac_rate_z_1);
    _mav_put_float(buf, 76, rcac_rate_z_2);
    _mav_put_float(buf, 80, rcac_rate_u_0);
    _mav_put_float(buf, 84, rcac_rate_u_1);
    _mav_put_float(buf, 88, rcac_rate_u_2);
    _mav_put_float(buf, 92, rcac_rate_theta_0);
    _mav_put_float(buf, 96, rcac_rate_theta_1);
    _mav_put_float(buf, 100, rcac_rate_theta_2);
    _mav_put_float(buf, 104, rcac_rate_theta_3);
    _mav_put_float(buf, 108, rcac_rate_theta_4);
    _mav_put_float(buf, 112, rcac_rate_theta_5);
    _mav_put_float(buf, 116, rcac_rate_theta_6);
    _mav_put_float(buf, 120, rcac_rate_theta_7);
    _mav_put_float(buf, 124, rcac_rate_theta_8);
    _mav_put_float(buf, 128, rcac_rate_theta_9);
    _mav_put_float(buf, 132, rcac_rate_theta_10);
    _mav_put_float(buf, 136, rcac_rate_theta_11);
    _mav_put_float(buf, 140, px4_att_theta_0);
    _mav_put_float(buf, 144, px4_att_theta_1);
    _mav_put_float(buf, 148, px4_att_theta_2);
    _mav_put_float(buf, 152, px4_rate_theta_0);
    _mav_put_float(buf, 156, px4_rate_theta_1);
    _mav_put_float(buf, 160, px4_rate_theta_2);
    _mav_put_float(buf, 164, px4_rate_theta_3);
    _mav_put_float(buf, 168, px4_rate_theta_4);
    _mav_put_float(buf, 172, px4_rate_theta_5);
    _mav_put_float(buf, 176, px4_rate_theta_6);
    _mav_put_float(buf, 180, px4_rate_theta_7);
    _mav_put_float(buf, 184, px4_rate_theta_8);
    _mav_put_float(buf, 188, px4_rate_theta_9);
    _mav_put_float(buf, 192, px4_rate_theta_10);
    _mav_put_float(buf, 196, px4_rate_theta_11);
    _mav_put_float(buf, 200, p11_att);
    _mav_put_float(buf, 204, p11_ratex);
    _mav_put_uint8_t(buf, 208, switch_att);
    _mav_put_uint8_t(buf, 209, switch_rate);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.alpha_pid_att = alpha_pid_att;
    packet.rcac_att_z_0 = rcac_att_z_0;
    packet.rcac_att_z_1 = rcac_att_z_1;
    packet.rcac_att_z_2 = rcac_att_z_2;
    packet.rcac_att_u_0 = rcac_att_u_0;
    packet.rcac_att_u_1 = rcac_att_u_1;
    packet.rcac_att_u_2 = rcac_att_u_2;
    packet.rcac_att_theta_0 = rcac_att_theta_0;
    packet.rcac_att_theta_1 = rcac_att_theta_1;
    packet.rcac_att_theta_2 = rcac_att_theta_2;
    packet.alpha_pid_rate = alpha_pid_rate;
    packet.rcac_rate_z_0 = rcac_rate_z_0;
    packet.rcac_rate_z_1 = rcac_rate_z_1;
    packet.rcac_rate_z_2 = rcac_rate_z_2;
    packet.rcac_rate_u_0 = rcac_rate_u_0;
    packet.rcac_rate_u_1 = rcac_rate_u_1;
    packet.rcac_rate_u_2 = rcac_rate_u_2;
    packet.rcac_rate_theta_0 = rcac_rate_theta_0;
    packet.rcac_rate_theta_1 = rcac_rate_theta_1;
    packet.rcac_rate_theta_2 = rcac_rate_theta_2;
    packet.rcac_rate_theta_3 = rcac_rate_theta_3;
    packet.rcac_rate_theta_4 = rcac_rate_theta_4;
    packet.rcac_rate_theta_5 = rcac_rate_theta_5;
    packet.rcac_rate_theta_6 = rcac_rate_theta_6;
    packet.rcac_rate_theta_7 = rcac_rate_theta_7;
    packet.rcac_rate_theta_8 = rcac_rate_theta_8;
    packet.rcac_rate_theta_9 = rcac_rate_theta_9;
    packet.rcac_rate_theta_10 = rcac_rate_theta_10;
    packet.rcac_rate_theta_11 = rcac_rate_theta_11;
    packet.px4_att_theta_0 = px4_att_theta_0;
    packet.px4_att_theta_1 = px4_att_theta_1;
    packet.px4_att_theta_2 = px4_att_theta_2;
    packet.px4_rate_theta_0 = px4_rate_theta_0;
    packet.px4_rate_theta_1 = px4_rate_theta_1;
    packet.px4_rate_theta_2 = px4_rate_theta_2;
    packet.px4_rate_theta_3 = px4_rate_theta_3;
    packet.px4_rate_theta_4 = px4_rate_theta_4;
    packet.px4_rate_theta_5 = px4_rate_theta_5;
    packet.px4_rate_theta_6 = px4_rate_theta_6;
    packet.px4_rate_theta_7 = px4_rate_theta_7;
    packet.px4_rate_theta_8 = px4_rate_theta_8;
    packet.px4_rate_theta_9 = px4_rate_theta_9;
    packet.px4_rate_theta_10 = px4_rate_theta_10;
    packet.px4_rate_theta_11 = px4_rate_theta_11;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
}

/**
 * @brief Encode a rcac_att_rate_variables struct
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param rcac_att_rate_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
    return mavlink_msg_rcac_att_rate_variables_pack(system_id, component_id, msg, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->alpha_pid_att, rcac_att_rate_variables->rcac_att_z_0, rcac_att_rate_variables->rcac_att_z_1, rcac_att_rate_variables->rcac_att_z_2, rcac_att_rate_variables->rcac_att_u_0, rcac_att_rate_variables->rcac_att_u_1, rcac_att_rate_variables->rcac_att_u_2, rcac_att_rate_variables->rcac_att_theta_0, rcac_att_rate_variables->rcac_att_theta_1, rcac_att_rate_variables->rcac_att_theta_2, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->alpha_pid_rate, rcac_att_rate_variables->rcac_rate_z_0, rcac_att_rate_variables->rcac_rate_z_1, rcac_att_rate_variables->rcac_rate_z_2, rcac_att_rate_variables->rcac_rate_u_0, rcac_att_rate_variables->rcac_rate_u_1, rcac_att_rate_variables->rcac_rate_u_2, rcac_att_rate_variables->rcac_rate_theta_0, rcac_att_rate_variables->rcac_rate_theta_1, rcac_att_rate_variables->rcac_rate_theta_2, rcac_att_rate_variables->rcac_rate_theta_3, rcac_att_rate_variables->rcac_rate_theta_4, rcac_att_rate_variables->rcac_rate_theta_5, rcac_att_rate_variables->rcac_rate_theta_6, rcac_att_rate_variables->rcac_rate_theta_7, rcac_att_rate_variables->rcac_rate_theta_8, rcac_att_rate_variables->rcac_rate_theta_9, rcac_att_rate_variables->rcac_rate_theta_10, rcac_att_rate_variables->rcac_rate_theta_11, rcac_att_rate_variables->px4_att_theta_0, rcac_att_rate_variables->px4_att_theta_1, rcac_att_rate_variables->px4_att_theta_2, rcac_att_rate_variables->px4_rate_theta_0, rcac_att_rate_variables->px4_rate_theta_1, rcac_att_rate_variables->px4_rate_theta_2, rcac_att_rate_variables->px4_rate_theta_3, rcac_att_rate_variables->px4_rate_theta_4, rcac_att_rate_variables->px4_rate_theta_5, rcac_att_rate_variables->px4_rate_theta_6, rcac_att_rate_variables->px4_rate_theta_7, rcac_att_rate_variables->px4_rate_theta_8, rcac_att_rate_variables->px4_rate_theta_9, rcac_att_rate_variables->px4_rate_theta_10, rcac_att_rate_variables->px4_rate_theta_11, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
}

/**
 * @brief Encode a rcac_att_rate_variables struct on a channel
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param rcac_att_rate_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
    return mavlink_msg_rcac_att_rate_variables_pack_chan(system_id, component_id, chan, msg, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->alpha_pid_att, rcac_att_rate_variables->rcac_att_z_0, rcac_att_rate_variables->rcac_att_z_1, rcac_att_rate_variables->rcac_att_z_2, rcac_att_rate_variables->rcac_att_u_0, rcac_att_rate_variables->rcac_att_u_1, rcac_att_rate_variables->rcac_att_u_2, rcac_att_rate_variables->rcac_att_theta_0, rcac_att_rate_variables->rcac_att_theta_1, rcac_att_rate_variables->rcac_att_theta_2, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->alpha_pid_rate, rcac_att_rate_variables->rcac_rate_z_0, rcac_att_rate_variables->rcac_rate_z_1, rcac_att_rate_variables->rcac_rate_z_2, rcac_att_rate_variables->rcac_rate_u_0, rcac_att_rate_variables->rcac_rate_u_1, rcac_att_rate_variables->rcac_rate_u_2, rcac_att_rate_variables->rcac_rate_theta_0, rcac_att_rate_variables->rcac_rate_theta_1, rcac_att_rate_variables->rcac_rate_theta_2, rcac_att_rate_variables->rcac_rate_theta_3, rcac_att_rate_variables->rcac_rate_theta_4, rcac_att_rate_variables->rcac_rate_theta_5, rcac_att_rate_variables->rcac_rate_theta_6, rcac_att_rate_variables->rcac_rate_theta_7, rcac_att_rate_variables->rcac_rate_theta_8, rcac_att_rate_variables->rcac_rate_theta_9, rcac_att_rate_variables->rcac_rate_theta_10, rcac_att_rate_variables->rcac_rate_theta_11, rcac_att_rate_variables->px4_att_theta_0, rcac_att_rate_variables->px4_att_theta_1, rcac_att_rate_variables->px4_att_theta_2, rcac_att_rate_variables->px4_rate_theta_0, rcac_att_rate_variables->px4_rate_theta_1, rcac_att_rate_variables->px4_rate_theta_2, rcac_att_rate_variables->px4_rate_theta_3, rcac_att_rate_variables->px4_rate_theta_4, rcac_att_rate_variables->px4_rate_theta_5, rcac_att_rate_variables->px4_rate_theta_6, rcac_att_rate_variables->px4_rate_theta_7, rcac_att_rate_variables->px4_rate_theta_8, rcac_att_rate_variables->px4_rate_theta_9, rcac_att_rate_variables->px4_rate_theta_10, rcac_att_rate_variables->px4_rate_theta_11, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
}

/**
 * @brief Send a rcac_att_rate_variables message
 * @param chan MAVLink channel to send the message
 *
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param alpha_pid_att  Gain multiplied by the PID attitude gains
 * @param rcac_att_z_0  Performance variable for the Attitude Controller 0
 * @param rcac_att_z_1  Performance variable for the Attitude Controller 1
 * @param rcac_att_z_2  Performance variable for the Attitude Controller 2
 * @param rcac_att_u_0  Control generated by the Attitude Controller 0
 * @param rcac_att_u_1  Control generated by the Attitude Controller 1
 * @param rcac_att_u_2  Control generated by the Attitude Controller 2
 * @param rcac_att_theta_0  P gains for the Attitude Controller 0
 * @param rcac_att_theta_1  P gains for the Attitude Controller 1
 * @param rcac_att_theta_2  P gains for the Attitude Controller 2
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param alpha_pid_rate  Gain multiplied by the PID rate gains
 * @param rcac_rate_z_0  Performance variable for the Rate Controller 0
 * @param rcac_rate_z_1  Performance variable for the Rate Controller 1
 * @param rcac_rate_z_2  Performance variable for the Rate Controller 2
 * @param rcac_rate_u_0  Control generated by the Rate Controller 0
 * @param rcac_rate_u_1  Control generated by the Rate Controller 1
 * @param rcac_rate_u_2  Control generated by the Rate Controller 2
 * @param rcac_rate_theta_0  PID+FF gains for the Rate Controller 0
 * @param rcac_rate_theta_1  PID+FF gains for the Rate Controller 1
 * @param rcac_rate_theta_2  PID+FF gains for the Rate Controller 2
 * @param rcac_rate_theta_3  PID+FF gains for the Rate Controller 3
 * @param rcac_rate_theta_4  PID+FF gains for the Rate Controller 4
 * @param rcac_rate_theta_5  PID+FF gains for the Rate Controller 5
 * @param rcac_rate_theta_6  PID+FF gains for the Rate Controller 6
 * @param rcac_rate_theta_7  PID+FF gains for the Rate Controller 7
 * @param rcac_rate_theta_8  PID+FF gains for the Rate Controller 8
 * @param rcac_rate_theta_9  PID+FF gains for the Rate Controller 9
 * @param rcac_rate_theta_10  PID+FF gains for the Rate Controller 10
 * @param rcac_rate_theta_11  PID+FF gains for the Rate Controller 11
 * @param px4_att_theta_0  P gains for the PX4 Attitude Controller 0
 * @param px4_att_theta_1  P gains for the PX4 Attitude Controller 1
 * @param px4_att_theta_2  P gains for the PX4 Attitude Controller 2
 * @param px4_rate_theta_0  P gains for the PX4 Rate Controller 0
 * @param px4_rate_theta_1  P gains for the PX4 Rate Controller 1
 * @param px4_rate_theta_2  P gains for the PX4 Rate Controller 2
 * @param px4_rate_theta_3  P gains for the PX4 Rate Controller 3
 * @param px4_rate_theta_4  P gains for the PX4 Rate Controller 4
 * @param px4_rate_theta_5  P gains for the PX4 Rate Controller 5
 * @param px4_rate_theta_6  P gains for the PX4 Rate Controller 6
 * @param px4_rate_theta_7  P gains for the PX4 Rate Controller 7
 * @param px4_rate_theta_8  P gains for the PX4 Rate Controller 8
 * @param px4_rate_theta_9  P gains for the PX4 Rate Controller 9
 * @param px4_rate_theta_10  P gains for the PX4 Rate Controller 10
 * @param px4_rate_theta_11  P gains for the PX4 Rate Controller 11
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rcac_att_rate_variables_send(mavlink_channel_t chan, uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, float alpha_pid_att, float rcac_att_z_0, float rcac_att_z_1, float rcac_att_z_2, float rcac_att_u_0, float rcac_att_u_1, float rcac_att_u_2, float rcac_att_theta_0, float rcac_att_theta_1, float rcac_att_theta_2, uint64_t ii_rate, uint8_t switch_rate, float alpha_pid_rate, float rcac_rate_z_0, float rcac_rate_z_1, float rcac_rate_z_2, float rcac_rate_u_0, float rcac_rate_u_1, float rcac_rate_u_2, float rcac_rate_theta_0, float rcac_rate_theta_1, float rcac_rate_theta_2, float rcac_rate_theta_3, float rcac_rate_theta_4, float rcac_rate_theta_5, float rcac_rate_theta_6, float rcac_rate_theta_7, float rcac_rate_theta_8, float rcac_rate_theta_9, float rcac_rate_theta_10, float rcac_rate_theta_11, float px4_att_theta_0, float px4_att_theta_1, float px4_att_theta_2, float px4_rate_theta_0, float px4_rate_theta_1, float px4_rate_theta_2, float px4_rate_theta_3, float px4_rate_theta_4, float px4_rate_theta_5, float px4_rate_theta_6, float px4_rate_theta_7, float px4_rate_theta_8, float px4_rate_theta_9, float px4_rate_theta_10, float px4_rate_theta_11, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 24, alpha_pid_att);
    _mav_put_float(buf, 28, rcac_att_z_0);
    _mav_put_float(buf, 32, rcac_att_z_1);
    _mav_put_float(buf, 36, rcac_att_z_2);
    _mav_put_float(buf, 40, rcac_att_u_0);
    _mav_put_float(buf, 44, rcac_att_u_1);
    _mav_put_float(buf, 48, rcac_att_u_2);
    _mav_put_float(buf, 52, rcac_att_theta_0);
    _mav_put_float(buf, 56, rcac_att_theta_1);
    _mav_put_float(buf, 60, rcac_att_theta_2);
    _mav_put_float(buf, 64, alpha_pid_rate);
    _mav_put_float(buf, 68, rcac_rate_z_0);
    _mav_put_float(buf, 72, rcac_rate_z_1);
    _mav_put_float(buf, 76, rcac_rate_z_2);
    _mav_put_float(buf, 80, rcac_rate_u_0);
    _mav_put_float(buf, 84, rcac_rate_u_1);
    _mav_put_float(buf, 88, rcac_rate_u_2);
    _mav_put_float(buf, 92, rcac_rate_theta_0);
    _mav_put_float(buf, 96, rcac_rate_theta_1);
    _mav_put_float(buf, 100, rcac_rate_theta_2);
    _mav_put_float(buf, 104, rcac_rate_theta_3);
    _mav_put_float(buf, 108, rcac_rate_theta_4);
    _mav_put_float(buf, 112, rcac_rate_theta_5);
    _mav_put_float(buf, 116, rcac_rate_theta_6);
    _mav_put_float(buf, 120, rcac_rate_theta_7);
    _mav_put_float(buf, 124, rcac_rate_theta_8);
    _mav_put_float(buf, 128, rcac_rate_theta_9);
    _mav_put_float(buf, 132, rcac_rate_theta_10);
    _mav_put_float(buf, 136, rcac_rate_theta_11);
    _mav_put_float(buf, 140, px4_att_theta_0);
    _mav_put_float(buf, 144, px4_att_theta_1);
    _mav_put_float(buf, 148, px4_att_theta_2);
    _mav_put_float(buf, 152, px4_rate_theta_0);
    _mav_put_float(buf, 156, px4_rate_theta_1);
    _mav_put_float(buf, 160, px4_rate_theta_2);
    _mav_put_float(buf, 164, px4_rate_theta_3);
    _mav_put_float(buf, 168, px4_rate_theta_4);
    _mav_put_float(buf, 172, px4_rate_theta_5);
    _mav_put_float(buf, 176, px4_rate_theta_6);
    _mav_put_float(buf, 180, px4_rate_theta_7);
    _mav_put_float(buf, 184, px4_rate_theta_8);
    _mav_put_float(buf, 188, px4_rate_theta_9);
    _mav_put_float(buf, 192, px4_rate_theta_10);
    _mav_put_float(buf, 196, px4_rate_theta_11);
    _mav_put_float(buf, 200, p11_att);
    _mav_put_float(buf, 204, p11_ratex);
    _mav_put_uint8_t(buf, 208, switch_att);
    _mav_put_uint8_t(buf, 209, switch_rate);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.alpha_pid_att = alpha_pid_att;
    packet.rcac_att_z_0 = rcac_att_z_0;
    packet.rcac_att_z_1 = rcac_att_z_1;
    packet.rcac_att_z_2 = rcac_att_z_2;
    packet.rcac_att_u_0 = rcac_att_u_0;
    packet.rcac_att_u_1 = rcac_att_u_1;
    packet.rcac_att_u_2 = rcac_att_u_2;
    packet.rcac_att_theta_0 = rcac_att_theta_0;
    packet.rcac_att_theta_1 = rcac_att_theta_1;
    packet.rcac_att_theta_2 = rcac_att_theta_2;
    packet.alpha_pid_rate = alpha_pid_rate;
    packet.rcac_rate_z_0 = rcac_rate_z_0;
    packet.rcac_rate_z_1 = rcac_rate_z_1;
    packet.rcac_rate_z_2 = rcac_rate_z_2;
    packet.rcac_rate_u_0 = rcac_rate_u_0;
    packet.rcac_rate_u_1 = rcac_rate_u_1;
    packet.rcac_rate_u_2 = rcac_rate_u_2;
    packet.rcac_rate_theta_0 = rcac_rate_theta_0;
    packet.rcac_rate_theta_1 = rcac_rate_theta_1;
    packet.rcac_rate_theta_2 = rcac_rate_theta_2;
    packet.rcac_rate_theta_3 = rcac_rate_theta_3;
    packet.rcac_rate_theta_4 = rcac_rate_theta_4;
    packet.rcac_rate_theta_5 = rcac_rate_theta_5;
    packet.rcac_rate_theta_6 = rcac_rate_theta_6;
    packet.rcac_rate_theta_7 = rcac_rate_theta_7;
    packet.rcac_rate_theta_8 = rcac_rate_theta_8;
    packet.rcac_rate_theta_9 = rcac_rate_theta_9;
    packet.rcac_rate_theta_10 = rcac_rate_theta_10;
    packet.rcac_rate_theta_11 = rcac_rate_theta_11;
    packet.px4_att_theta_0 = px4_att_theta_0;
    packet.px4_att_theta_1 = px4_att_theta_1;
    packet.px4_att_theta_2 = px4_att_theta_2;
    packet.px4_rate_theta_0 = px4_rate_theta_0;
    packet.px4_rate_theta_1 = px4_rate_theta_1;
    packet.px4_rate_theta_2 = px4_rate_theta_2;
    packet.px4_rate_theta_3 = px4_rate_theta_3;
    packet.px4_rate_theta_4 = px4_rate_theta_4;
    packet.px4_rate_theta_5 = px4_rate_theta_5;
    packet.px4_rate_theta_6 = px4_rate_theta_6;
    packet.px4_rate_theta_7 = px4_rate_theta_7;
    packet.px4_rate_theta_8 = px4_rate_theta_8;
    packet.px4_rate_theta_9 = px4_rate_theta_9;
    packet.px4_rate_theta_10 = px4_rate_theta_10;
    packet.px4_rate_theta_11 = px4_rate_theta_11;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)&packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}

/**
 * @brief Send a rcac_att_rate_variables message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_rcac_att_rate_variables_send_struct(mavlink_channel_t chan, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_rcac_att_rate_variables_send(chan, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->alpha_pid_att, rcac_att_rate_variables->rcac_att_z_0, rcac_att_rate_variables->rcac_att_z_1, rcac_att_rate_variables->rcac_att_z_2, rcac_att_rate_variables->rcac_att_u_0, rcac_att_rate_variables->rcac_att_u_1, rcac_att_rate_variables->rcac_att_u_2, rcac_att_rate_variables->rcac_att_theta_0, rcac_att_rate_variables->rcac_att_theta_1, rcac_att_rate_variables->rcac_att_theta_2, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->alpha_pid_rate, rcac_att_rate_variables->rcac_rate_z_0, rcac_att_rate_variables->rcac_rate_z_1, rcac_att_rate_variables->rcac_rate_z_2, rcac_att_rate_variables->rcac_rate_u_0, rcac_att_rate_variables->rcac_rate_u_1, rcac_att_rate_variables->rcac_rate_u_2, rcac_att_rate_variables->rcac_rate_theta_0, rcac_att_rate_variables->rcac_rate_theta_1, rcac_att_rate_variables->rcac_rate_theta_2, rcac_att_rate_variables->rcac_rate_theta_3, rcac_att_rate_variables->rcac_rate_theta_4, rcac_att_rate_variables->rcac_rate_theta_5, rcac_att_rate_variables->rcac_rate_theta_6, rcac_att_rate_variables->rcac_rate_theta_7, rcac_att_rate_variables->rcac_rate_theta_8, rcac_att_rate_variables->rcac_rate_theta_9, rcac_att_rate_variables->rcac_rate_theta_10, rcac_att_rate_variables->rcac_rate_theta_11, rcac_att_rate_variables->px4_att_theta_0, rcac_att_rate_variables->px4_att_theta_1, rcac_att_rate_variables->px4_att_theta_2, rcac_att_rate_variables->px4_rate_theta_0, rcac_att_rate_variables->px4_rate_theta_1, rcac_att_rate_variables->px4_rate_theta_2, rcac_att_rate_variables->px4_rate_theta_3, rcac_att_rate_variables->px4_rate_theta_4, rcac_att_rate_variables->px4_rate_theta_5, rcac_att_rate_variables->px4_rate_theta_6, rcac_att_rate_variables->px4_rate_theta_7, rcac_att_rate_variables->px4_rate_theta_8, rcac_att_rate_variables->px4_rate_theta_9, rcac_att_rate_variables->px4_rate_theta_10, rcac_att_rate_variables->px4_rate_theta_11, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)rcac_att_rate_variables, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}

#if MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN <= MAVLINK_MAX_PAYLOAD_LEN
/*
  This varient of _send() can be used to save stack space by re-using
  memory from the receive buffer.  The caller provides a
  mavlink_message_t which is the size of a full mavlink message. This
  is usually the receive buffer for the channel, and allows a reply to an
  incoming message with minimum stack space usage.
 */
static inline void mavlink_msg_rcac_att_rate_variables_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, float alpha_pid_att, float rcac_att_z_0, float rcac_att_z_1, float rcac_att_z_2, float rcac_att_u_0, float rcac_att_u_1, float rcac_att_u_2, float rcac_att_theta_0, float rcac_att_theta_1, float rcac_att_theta_2, uint64_t ii_rate, uint8_t switch_rate, float alpha_pid_rate, float rcac_rate_z_0, float rcac_rate_z_1, float rcac_rate_z_2, float rcac_rate_u_0, float rcac_rate_u_1, float rcac_rate_u_2, float rcac_rate_theta_0, float rcac_rate_theta_1, float rcac_rate_theta_2, float rcac_rate_theta_3, float rcac_rate_theta_4, float rcac_rate_theta_5, float rcac_rate_theta_6, float rcac_rate_theta_7, float rcac_rate_theta_8, float rcac_rate_theta_9, float rcac_rate_theta_10, float rcac_rate_theta_11, float px4_att_theta_0, float px4_att_theta_1, float px4_att_theta_2, float px4_rate_theta_0, float px4_rate_theta_1, float px4_rate_theta_2, float px4_rate_theta_3, float px4_rate_theta_4, float px4_rate_theta_5, float px4_rate_theta_6, float px4_rate_theta_7, float px4_rate_theta_8, float px4_rate_theta_9, float px4_rate_theta_10, float px4_rate_theta_11, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char *buf = (char *)msgbuf;
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 24, alpha_pid_att);
    _mav_put_float(buf, 28, rcac_att_z_0);
    _mav_put_float(buf, 32, rcac_att_z_1);
    _mav_put_float(buf, 36, rcac_att_z_2);
    _mav_put_float(buf, 40, rcac_att_u_0);
    _mav_put_float(buf, 44, rcac_att_u_1);
    _mav_put_float(buf, 48, rcac_att_u_2);
    _mav_put_float(buf, 52, rcac_att_theta_0);
    _mav_put_float(buf, 56, rcac_att_theta_1);
    _mav_put_float(buf, 60, rcac_att_theta_2);
    _mav_put_float(buf, 64, alpha_pid_rate);
    _mav_put_float(buf, 68, rcac_rate_z_0);
    _mav_put_float(buf, 72, rcac_rate_z_1);
    _mav_put_float(buf, 76, rcac_rate_z_2);
    _mav_put_float(buf, 80, rcac_rate_u_0);
    _mav_put_float(buf, 84, rcac_rate_u_1);
    _mav_put_float(buf, 88, rcac_rate_u_2);
    _mav_put_float(buf, 92, rcac_rate_theta_0);
    _mav_put_float(buf, 96, rcac_rate_theta_1);
    _mav_put_float(buf, 100, rcac_rate_theta_2);
    _mav_put_float(buf, 104, rcac_rate_theta_3);
    _mav_put_float(buf, 108, rcac_rate_theta_4);
    _mav_put_float(buf, 112, rcac_rate_theta_5);
    _mav_put_float(buf, 116, rcac_rate_theta_6);
    _mav_put_float(buf, 120, rcac_rate_theta_7);
    _mav_put_float(buf, 124, rcac_rate_theta_8);
    _mav_put_float(buf, 128, rcac_rate_theta_9);
    _mav_put_float(buf, 132, rcac_rate_theta_10);
    _mav_put_float(buf, 136, rcac_rate_theta_11);
    _mav_put_float(buf, 140, px4_att_theta_0);
    _mav_put_float(buf, 144, px4_att_theta_1);
    _mav_put_float(buf, 148, px4_att_theta_2);
    _mav_put_float(buf, 152, px4_rate_theta_0);
    _mav_put_float(buf, 156, px4_rate_theta_1);
    _mav_put_float(buf, 160, px4_rate_theta_2);
    _mav_put_float(buf, 164, px4_rate_theta_3);
    _mav_put_float(buf, 168, px4_rate_theta_4);
    _mav_put_float(buf, 172, px4_rate_theta_5);
    _mav_put_float(buf, 176, px4_rate_theta_6);
    _mav_put_float(buf, 180, px4_rate_theta_7);
    _mav_put_float(buf, 184, px4_rate_theta_8);
    _mav_put_float(buf, 188, px4_rate_theta_9);
    _mav_put_float(buf, 192, px4_rate_theta_10);
    _mav_put_float(buf, 196, px4_rate_theta_11);
    _mav_put_float(buf, 200, p11_att);
    _mav_put_float(buf, 204, p11_ratex);
    _mav_put_uint8_t(buf, 208, switch_att);
    _mav_put_uint8_t(buf, 209, switch_rate);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#else
    mavlink_rcac_att_rate_variables_t *packet = (mavlink_rcac_att_rate_variables_t *)msgbuf;
    packet->timestamp = timestamp;
    packet->ii_att = ii_att;
    packet->ii_rate = ii_rate;
    packet->alpha_pid_att = alpha_pid_att;
    packet->rcac_att_z_0 = rcac_att_z_0;
    packet->rcac_att_z_1 = rcac_att_z_1;
    packet->rcac_att_z_2 = rcac_att_z_2;
    packet->rcac_att_u_0 = rcac_att_u_0;
    packet->rcac_att_u_1 = rcac_att_u_1;
    packet->rcac_att_u_2 = rcac_att_u_2;
    packet->rcac_att_theta_0 = rcac_att_theta_0;
    packet->rcac_att_theta_1 = rcac_att_theta_1;
    packet->rcac_att_theta_2 = rcac_att_theta_2;
    packet->alpha_pid_rate = alpha_pid_rate;
    packet->rcac_rate_z_0 = rcac_rate_z_0;
    packet->rcac_rate_z_1 = rcac_rate_z_1;
    packet->rcac_rate_z_2 = rcac_rate_z_2;
    packet->rcac_rate_u_0 = rcac_rate_u_0;
    packet->rcac_rate_u_1 = rcac_rate_u_1;
    packet->rcac_rate_u_2 = rcac_rate_u_2;
    packet->rcac_rate_theta_0 = rcac_rate_theta_0;
    packet->rcac_rate_theta_1 = rcac_rate_theta_1;
    packet->rcac_rate_theta_2 = rcac_rate_theta_2;
    packet->rcac_rate_theta_3 = rcac_rate_theta_3;
    packet->rcac_rate_theta_4 = rcac_rate_theta_4;
    packet->rcac_rate_theta_5 = rcac_rate_theta_5;
    packet->rcac_rate_theta_6 = rcac_rate_theta_6;
    packet->rcac_rate_theta_7 = rcac_rate_theta_7;
    packet->rcac_rate_theta_8 = rcac_rate_theta_8;
    packet->rcac_rate_theta_9 = rcac_rate_theta_9;
    packet->rcac_rate_theta_10 = rcac_rate_theta_10;
    packet->rcac_rate_theta_11 = rcac_rate_theta_11;
    packet->px4_att_theta_0 = px4_att_theta_0;
    packet->px4_att_theta_1 = px4_att_theta_1;
    packet->px4_att_theta_2 = px4_att_theta_2;
    packet->px4_rate_theta_0 = px4_rate_theta_0;
    packet->px4_rate_theta_1 = px4_rate_theta_1;
    packet->px4_rate_theta_2 = px4_rate_theta_2;
    packet->px4_rate_theta_3 = px4_rate_theta_3;
    packet->px4_rate_theta_4 = px4_rate_theta_4;
    packet->px4_rate_theta_5 = px4_rate_theta_5;
    packet->px4_rate_theta_6 = px4_rate_theta_6;
    packet->px4_rate_theta_7 = px4_rate_theta_7;
    packet->px4_rate_theta_8 = px4_rate_theta_8;
    packet->px4_rate_theta_9 = px4_rate_theta_9;
    packet->px4_rate_theta_10 = px4_rate_theta_10;
    packet->px4_rate_theta_11 = px4_rate_theta_11;
    packet->p11_att = p11_att;
    packet->p11_ratex = p11_ratex;
    packet->switch_att = switch_att;
    packet->switch_rate = switch_rate;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}
#endif

#endif

// MESSAGE RCAC_ATT_RATE_VARIABLES UNPACKING


/**
 * @brief Get field timestamp from rcac_att_rate_variables message
 *
 * @return  Time since system start
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  0);
}

/**
 * @brief Get field ii_att from rcac_att_rate_variables message
 *
 * @return  iteration step of the RCAC Attitude Controller
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_ii_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  8);
}

/**
 * @brief Get field switch_att from rcac_att_rate_variables message
 *
 * @return  RCAC Att Controller switch
 */
static inline uint8_t mavlink_msg_rcac_att_rate_variables_get_switch_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  208);
}

/**
 * @brief Get field alpha_pid_att from rcac_att_rate_variables message
 *
 * @return  Gain multiplied by the PID attitude gains
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_alpha_pid_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  24);
}

/**
 * @brief Get field rcac_att_z_0 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Attitude Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  28);
}

/**
 * @brief Get field rcac_att_z_1 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Attitude Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  32);
}

/**
 * @brief Get field rcac_att_z_2 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Attitude Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  36);
}

/**
 * @brief Get field rcac_att_u_0 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Attitude Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  40);
}

/**
 * @brief Get field rcac_att_u_1 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Attitude Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  44);
}

/**
 * @brief Get field rcac_att_u_2 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Attitude Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  48);
}

/**
 * @brief Get field rcac_att_theta_0 from rcac_att_rate_variables message
 *
 * @return  P gains for the Attitude Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  52);
}

/**
 * @brief Get field rcac_att_theta_1 from rcac_att_rate_variables message
 *
 * @return  P gains for the Attitude Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  56);
}

/**
 * @brief Get field rcac_att_theta_2 from rcac_att_rate_variables message
 *
 * @return  P gains for the Attitude Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  60);
}

/**
 * @brief Get field ii_rate from rcac_att_rate_variables message
 *
 * @return  iteration step of the RCAC Rate Controller
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_ii_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  16);
}

/**
 * @brief Get field switch_rate from rcac_att_rate_variables message
 *
 * @return  RCAC Rate Controller switch
 */
static inline uint8_t mavlink_msg_rcac_att_rate_variables_get_switch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  209);
}

/**
 * @brief Get field alpha_pid_rate from rcac_att_rate_variables message
 *
 * @return  Gain multiplied by the PID rate gains
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_alpha_pid_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  64);
}

/**
 * @brief Get field rcac_rate_z_0 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Rate Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  68);
}

/**
 * @brief Get field rcac_rate_z_1 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Rate Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  72);
}

/**
 * @brief Get field rcac_rate_z_2 from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Rate Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  76);
}

/**
 * @brief Get field rcac_rate_u_0 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Rate Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  80);
}

/**
 * @brief Get field rcac_rate_u_1 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Rate Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  84);
}

/**
 * @brief Get field rcac_rate_u_2 from rcac_att_rate_variables message
 *
 * @return  Control generated by the Rate Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  88);
}

/**
 * @brief Get field rcac_rate_theta_0 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  92);
}

/**
 * @brief Get field rcac_rate_theta_1 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  96);
}

/**
 * @brief Get field rcac_rate_theta_2 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  100);
}

/**
 * @brief Get field rcac_rate_theta_3 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 3
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  104);
}

/**
 * @brief Get field rcac_rate_theta_4 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 4
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  108);
}

/**
 * @brief Get field rcac_rate_theta_5 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 5
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  112);
}

/**
 * @brief Get field rcac_rate_theta_6 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 6
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  116);
}

/**
 * @brief Get field rcac_rate_theta_7 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 7
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  120);
}

/**
 * @brief Get field rcac_rate_theta_8 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 8
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_8(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  124);
}

/**
 * @brief Get field rcac_rate_theta_9 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 9
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_9(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  128);
}

/**
 * @brief Get field rcac_rate_theta_10 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 10
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_10(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  132);
}

/**
 * @brief Get field rcac_rate_theta_11 from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller 11
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_11(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  136);
}

/**
 * @brief Get field px4_att_theta_0 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Attitude Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  140);
}

/**
 * @brief Get field px4_att_theta_1 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Attitude Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  144);
}

/**
 * @brief Get field px4_att_theta_2 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Attitude Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  148);
}

/**
 * @brief Get field px4_rate_theta_0 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 0
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  152);
}

/**
 * @brief Get field px4_rate_theta_1 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 1
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  156);
}

/**
 * @brief Get field px4_rate_theta_2 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 2
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  160);
}

/**
 * @brief Get field px4_rate_theta_3 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 3
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  164);
}

/**
 * @brief Get field px4_rate_theta_4 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 4
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  168);
}

/**
 * @brief Get field px4_rate_theta_5 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 5
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  172);
}

/**
 * @brief Get field px4_rate_theta_6 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 6
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  176);
}

/**
 * @brief Get field px4_rate_theta_7 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 7
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  180);
}

/**
 * @brief Get field px4_rate_theta_8 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 8
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_8(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  184);
}

/**
 * @brief Get field px4_rate_theta_9 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 9
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_9(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  188);
}

/**
 * @brief Get field px4_rate_theta_10 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 10
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_10(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  192);
}

/**
 * @brief Get field px4_rate_theta_11 from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller 11
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_11(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  196);
}

/**
 * @brief Get field p11_att from rcac_att_rate_variables message
 *
 * @return  P(1,1) of the RCAC Attitude Controller
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_p11_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  200);
}

/**
 * @brief Get field p11_ratex from rcac_att_rate_variables message
 *
 * @return  P(1,1) of the RCAC Rate Controller
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_p11_ratex(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  204);
}

/**
 * @brief Decode a rcac_att_rate_variables message into a struct
 *
 * @param msg The message to decode
 * @param rcac_att_rate_variables C-struct to decode the message contents into
 */
static inline void mavlink_msg_rcac_att_rate_variables_decode(const mavlink_message_t* msg, mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    rcac_att_rate_variables->timestamp = mavlink_msg_rcac_att_rate_variables_get_timestamp(msg);
    rcac_att_rate_variables->ii_att = mavlink_msg_rcac_att_rate_variables_get_ii_att(msg);
    rcac_att_rate_variables->ii_rate = mavlink_msg_rcac_att_rate_variables_get_ii_rate(msg);
    rcac_att_rate_variables->alpha_pid_att = mavlink_msg_rcac_att_rate_variables_get_alpha_pid_att(msg);
    rcac_att_rate_variables->rcac_att_z_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_0(msg);
    rcac_att_rate_variables->rcac_att_z_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_1(msg);
    rcac_att_rate_variables->rcac_att_z_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_z_2(msg);
    rcac_att_rate_variables->rcac_att_u_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_0(msg);
    rcac_att_rate_variables->rcac_att_u_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_1(msg);
    rcac_att_rate_variables->rcac_att_u_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_u_2(msg);
    rcac_att_rate_variables->rcac_att_theta_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_0(msg);
    rcac_att_rate_variables->rcac_att_theta_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_1(msg);
    rcac_att_rate_variables->rcac_att_theta_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta_2(msg);
    rcac_att_rate_variables->alpha_pid_rate = mavlink_msg_rcac_att_rate_variables_get_alpha_pid_rate(msg);
    rcac_att_rate_variables->rcac_rate_z_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_0(msg);
    rcac_att_rate_variables->rcac_rate_z_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_1(msg);
    rcac_att_rate_variables->rcac_rate_z_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z_2(msg);
    rcac_att_rate_variables->rcac_rate_u_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_0(msg);
    rcac_att_rate_variables->rcac_rate_u_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_1(msg);
    rcac_att_rate_variables->rcac_rate_u_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u_2(msg);
    rcac_att_rate_variables->rcac_rate_theta_0 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_0(msg);
    rcac_att_rate_variables->rcac_rate_theta_1 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_1(msg);
    rcac_att_rate_variables->rcac_rate_theta_2 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_2(msg);
    rcac_att_rate_variables->rcac_rate_theta_3 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_3(msg);
    rcac_att_rate_variables->rcac_rate_theta_4 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_4(msg);
    rcac_att_rate_variables->rcac_rate_theta_5 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_5(msg);
    rcac_att_rate_variables->rcac_rate_theta_6 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_6(msg);
    rcac_att_rate_variables->rcac_rate_theta_7 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_7(msg);
    rcac_att_rate_variables->rcac_rate_theta_8 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_8(msg);
    rcac_att_rate_variables->rcac_rate_theta_9 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_9(msg);
    rcac_att_rate_variables->rcac_rate_theta_10 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_10(msg);
    rcac_att_rate_variables->rcac_rate_theta_11 = mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta_11(msg);
    rcac_att_rate_variables->px4_att_theta_0 = mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_0(msg);
    rcac_att_rate_variables->px4_att_theta_1 = mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_1(msg);
    rcac_att_rate_variables->px4_att_theta_2 = mavlink_msg_rcac_att_rate_variables_get_px4_att_theta_2(msg);
    rcac_att_rate_variables->px4_rate_theta_0 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_0(msg);
    rcac_att_rate_variables->px4_rate_theta_1 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_1(msg);
    rcac_att_rate_variables->px4_rate_theta_2 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_2(msg);
    rcac_att_rate_variables->px4_rate_theta_3 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_3(msg);
    rcac_att_rate_variables->px4_rate_theta_4 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_4(msg);
    rcac_att_rate_variables->px4_rate_theta_5 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_5(msg);
    rcac_att_rate_variables->px4_rate_theta_6 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_6(msg);
    rcac_att_rate_variables->px4_rate_theta_7 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_7(msg);
    rcac_att_rate_variables->px4_rate_theta_8 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_8(msg);
    rcac_att_rate_variables->px4_rate_theta_9 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_9(msg);
    rcac_att_rate_variables->px4_rate_theta_10 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_10(msg);
    rcac_att_rate_variables->px4_rate_theta_11 = mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta_11(msg);
    rcac_att_rate_variables->p11_att = mavlink_msg_rcac_att_rate_variables_get_p11_att(msg);
    rcac_att_rate_variables->p11_ratex = mavlink_msg_rcac_att_rate_variables_get_p11_ratex(msg);
    rcac_att_rate_variables->switch_att = mavlink_msg_rcac_att_rate_variables_get_switch_att(msg);
    rcac_att_rate_variables->switch_rate = mavlink_msg_rcac_att_rate_variables_get_switch_rate(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN? msg->len : MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN;
        memset(rcac_att_rate_variables, 0, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
    memcpy(rcac_att_rate_variables, _MAV_PAYLOAD(msg), len);
#endif
}
