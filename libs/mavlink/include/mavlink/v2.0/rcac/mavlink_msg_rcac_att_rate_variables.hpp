// MESSAGE RCAC_ATT_RATE_VARIABLES support class

#pragma once

namespace mavlink {
namespace rcac {
namespace msg {

/**
 * @brief RCAC_ATT_RATE_VARIABLES message
 *
 * Attitude controller RCAC variables
 */
struct RCAC_ATT_RATE_VARIABLES : mavlink::Message {
    static constexpr msgid_t MSG_ID = 10001;
    static constexpr size_t LENGTH = 134;
    static constexpr size_t MIN_LENGTH = 134;
    static constexpr uint8_t CRC_EXTRA = 206;
    static constexpr auto NAME = "RCAC_ATT_RATE_VARIABLES";


    uint64_t timestamp; /*<  Time since system start */
    uint64_t ii_att; /*<  iteration step of the RCAC Attitude Controller */
    uint8_t switch_att; /*<  RCAC Att Controller switch */
    std::array<float, 3> rcac_att_z; /*<  Performance variable for the Attitude Controller */
    std::array<float, 3> rcac_att_u; /*<  Control generated by the Attitude Controller */
    std::array<float, 3> rcac_att_theta; /*<  P gains for the Attitude Controller */
    uint64_t ii_rate; /*<  iteration step of the RCAC Rate Controller */
    uint8_t switch_rate; /*<  RCAC Rate Controller switch */
    std::array<float, 3> rcac_rate_z; /*<  Performance variable for the Rate Controller */
    std::array<float, 3> rcac_rate_u; /*<  Control generated by the Rate Controller */
    std::array<float, 12> rcac_rate_theta; /*<  PID+FF gains for the Rate Controller */


    inline std::string get_name(void) const override
    {
            return NAME;
    }

    inline Info get_message_info(void) const override
    {
            return { MSG_ID, LENGTH, MIN_LENGTH, CRC_EXTRA };
    }

    inline std::string to_yaml(void) const override
    {
        std::stringstream ss;

        ss << NAME << ":" << std::endl;
        ss << "  timestamp: " << timestamp << std::endl;
        ss << "  ii_att: " << ii_att << std::endl;
        ss << "  switch_att: " << +switch_att << std::endl;
        ss << "  rcac_att_z: [" << to_string(rcac_att_z) << "]" << std::endl;
        ss << "  rcac_att_u: [" << to_string(rcac_att_u) << "]" << std::endl;
        ss << "  rcac_att_theta: [" << to_string(rcac_att_theta) << "]" << std::endl;
        ss << "  ii_rate: " << ii_rate << std::endl;
        ss << "  switch_rate: " << +switch_rate << std::endl;
        ss << "  rcac_rate_z: [" << to_string(rcac_rate_z) << "]" << std::endl;
        ss << "  rcac_rate_u: [" << to_string(rcac_rate_u) << "]" << std::endl;
        ss << "  rcac_rate_theta: [" << to_string(rcac_rate_theta) << "]" << std::endl;

        return ss.str();
    }

    inline void serialize(mavlink::MsgMap &map) const override
    {
        map.reset(MSG_ID, LENGTH);

        map << timestamp;                     // offset: 0
        map << ii_att;                        // offset: 8
        map << ii_rate;                       // offset: 16
        map << rcac_att_z;                    // offset: 24
        map << rcac_att_u;                    // offset: 36
        map << rcac_att_theta;                // offset: 48
        map << rcac_rate_z;                   // offset: 60
        map << rcac_rate_u;                   // offset: 72
        map << rcac_rate_theta;               // offset: 84
        map << switch_att;                    // offset: 132
        map << switch_rate;                   // offset: 133
    }

    inline void deserialize(mavlink::MsgMap &map) override
    {
        map >> timestamp;                     // offset: 0
        map >> ii_att;                        // offset: 8
        map >> ii_rate;                       // offset: 16
        map >> rcac_att_z;                    // offset: 24
        map >> rcac_att_u;                    // offset: 36
        map >> rcac_att_theta;                // offset: 48
        map >> rcac_rate_z;                   // offset: 60
        map >> rcac_rate_u;                   // offset: 72
        map >> rcac_rate_theta;               // offset: 84
        map >> switch_att;                    // offset: 132
        map >> switch_rate;                   // offset: 133
    }
};

} // namespace msg
} // namespace rcac
} // namespace mavlink
