#pragma once
// MESSAGE RCAC_POS_VEL_VARIABLES PACKING

#define MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES 10002


typedef struct __mavlink_rcac_pos_vel_variables_t {
 uint64_t timestamp; /*<  Time since system start*/
 uint64_t ii_pos; /*<  iteration step of the RCAC Position Controller*/
 uint64_t ii_vel; /*<  iteration step of the RCAC Velocity Controller*/
 float pid_factor; /*<  PID scaling*/
 float rcac_master_sw; /*<  Master RCAC switch*/
 float alpha_pid_pos; /*<  Gain multiplied by the PID position gains*/
 float rcac_pos_z_0; /*<  Performance variable for the Position Controller 0*/
 float rcac_pos_z_1; /*<  Performance variable for the Position Controller 1*/
 float rcac_pos_z_2; /*<  Performance variable for the Position Controller 2*/
 float rcac_pos_u_0; /*<  Control generated by the Position Controller 0*/
 float rcac_pos_u_1; /*<  Control generated by the Position Controller 1*/
 float rcac_pos_u_2; /*<  Control generated by the Position Controller 2*/
 float rcac_pos_theta_0; /*<  P gains for the Position Controller 0*/
 float rcac_pos_theta_1; /*<  P gains for the Position Controller 1*/
 float rcac_pos_theta_2; /*<  P gains for the Position Controller 2*/
 float alpha_pid_vel; /*<  Gain multiplied by the PID velocity gains*/
 float rcac_vel_z_0; /*<  Performance variable for the Velocity Controller 0*/
 float rcac_vel_z_1; /*<  Performance variable for the Velocity Controller 1*/
 float rcac_vel_z_2; /*<  Performance variable for the Velocity Controller 2*/
 float rcac_vel_u_0; /*<  Control generated by the Velocity Controller 0*/
 float rcac_vel_u_1; /*<  Control generated by the Velocity Controller 1*/
 float rcac_vel_u_2; /*<  Control generated by the Velocity Controller 2*/
 float rcac_vel_theta_0; /*<  PID gains for the Velocity Controller 0*/
 float rcac_vel_theta_1; /*<  PID gains for the Velocity Controller 1*/
 float rcac_vel_theta_2; /*<  PID gains for the Velocity Controller 2*/
 float rcac_vel_theta_3; /*<  PID gains for the Velocity Controller 3*/
 float rcac_vel_theta_4; /*<  PID gains for the Velocity Controller 4*/
 float rcac_vel_theta_5; /*<  PID gains for the Velocity Controller 5*/
 float rcac_vel_theta_6; /*<  PID gains for the Velocity Controller 6*/
 float rcac_vel_theta_7; /*<  PID gains for the Velocity Controller 7*/
 float rcac_vel_theta_8; /*<  PID gains for the Velocity Controller 8*/
 float px4_ol_theta_0; /*<  P and PID gains for the PX4 outer loop Controller 0*/
 float px4_ol_theta_1; /*<  P and PID gains for the PX4 outer loop Controller 1*/
 float px4_ol_theta_2; /*<  P and PID gains for the PX4 outer loop Controller 2*/
 float px4_ol_theta_3; /*<  P and PID gains for the PX4 outer loop Controller 3*/
 float px4_ol_theta_4; /*<  P and PID gains for the PX4 outer loop Controller 4*/
 float px4_ol_theta_5; /*<  P and PID gains for the PX4 outer loop Controller 5*/
 float px4_ol_theta_6; /*<  P and PID gains for the PX4 outer loop Controller 6*/
 float px4_ol_theta_7; /*<  P and PID gains for the PX4 outer loop Controller 7*/
 float px4_ol_theta_8; /*<  P and PID gains for the PX4 outer loop Controller 8*/
 float p11_pos; /*<  P(1,1) of the RCAC Position Controllerr*/
 float p11_velx; /*<  P(1,1) of the RCAC Velocity Controller*/
 uint8_t switch_pos; /*<  RCAC Position Controller switch*/
 uint8_t switch_vel; /*<  RCAC Velocity Controller switch*/
} mavlink_rcac_pos_vel_variables_t;

#define MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN 182
#define MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN 182
#define MAVLINK_MSG_ID_10002_LEN 182
#define MAVLINK_MSG_ID_10002_MIN_LEN 182

#define MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC 64
#define MAVLINK_MSG_ID_10002_CRC 64



#if MAVLINK_COMMAND_24BIT
#define MAVLINK_MESSAGE_INFO_RCAC_POS_VEL_VARIABLES { \
    10002, \
    "RCAC_POS_VEL_VARIABLES", \
    44, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_pos_vel_variables_t, timestamp) }, \
         { "pid_factor", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_rcac_pos_vel_variables_t, pid_factor) }, \
         { "rcac_master_sw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_master_sw) }, \
         { "ii_pos", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_pos_vel_variables_t, ii_pos) }, \
         { "switch_pos", NULL, MAVLINK_TYPE_UINT8_T, 0, 180, offsetof(mavlink_rcac_pos_vel_variables_t, switch_pos) }, \
         { "alpha_pid_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_rcac_pos_vel_variables_t, alpha_pid_pos) }, \
         { "rcac_pos_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_0) }, \
         { "rcac_pos_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_1) }, \
         { "rcac_pos_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_2) }, \
         { "rcac_pos_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_0) }, \
         { "rcac_pos_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_1) }, \
         { "rcac_pos_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_2) }, \
         { "rcac_pos_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_0) }, \
         { "rcac_pos_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_1) }, \
         { "rcac_pos_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_2) }, \
         { "ii_vel", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_pos_vel_variables_t, ii_vel) }, \
         { "switch_vel", NULL, MAVLINK_TYPE_UINT8_T, 0, 181, offsetof(mavlink_rcac_pos_vel_variables_t, switch_vel) }, \
         { "alpha_pid_vel", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_rcac_pos_vel_variables_t, alpha_pid_vel) }, \
         { "rcac_vel_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_0) }, \
         { "rcac_vel_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_1) }, \
         { "rcac_vel_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 84, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_2) }, \
         { "rcac_vel_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 88, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_0) }, \
         { "rcac_vel_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 92, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_1) }, \
         { "rcac_vel_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 96, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_2) }, \
         { "rcac_vel_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 100, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_0) }, \
         { "rcac_vel_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 104, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_1) }, \
         { "rcac_vel_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 108, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_2) }, \
         { "rcac_vel_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 112, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_3) }, \
         { "rcac_vel_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 116, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_4) }, \
         { "rcac_vel_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 120, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_5) }, \
         { "rcac_vel_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 124, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_6) }, \
         { "rcac_vel_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 128, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_7) }, \
         { "rcac_vel_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 132, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_8) }, \
         { "px4_ol_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 136, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_0) }, \
         { "px4_ol_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 140, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_1) }, \
         { "px4_ol_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 144, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_2) }, \
         { "px4_ol_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 148, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_3) }, \
         { "px4_ol_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 152, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_4) }, \
         { "px4_ol_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 156, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_5) }, \
         { "px4_ol_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 160, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_6) }, \
         { "px4_ol_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 164, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_7) }, \
         { "px4_ol_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 168, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_8) }, \
         { "p11_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 172, offsetof(mavlink_rcac_pos_vel_variables_t, p11_pos) }, \
         { "p11_velx", NULL, MAVLINK_TYPE_FLOAT, 0, 176, offsetof(mavlink_rcac_pos_vel_variables_t, p11_velx) }, \
         } \
}
#else
#define MAVLINK_MESSAGE_INFO_RCAC_POS_VEL_VARIABLES { \
    "RCAC_POS_VEL_VARIABLES", \
    44, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_pos_vel_variables_t, timestamp) }, \
         { "pid_factor", NULL, MAVLINK_TYPE_FLOAT, 0, 24, offsetof(mavlink_rcac_pos_vel_variables_t, pid_factor) }, \
         { "rcac_master_sw", NULL, MAVLINK_TYPE_FLOAT, 0, 28, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_master_sw) }, \
         { "ii_pos", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_pos_vel_variables_t, ii_pos) }, \
         { "switch_pos", NULL, MAVLINK_TYPE_UINT8_T, 0, 180, offsetof(mavlink_rcac_pos_vel_variables_t, switch_pos) }, \
         { "alpha_pid_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 32, offsetof(mavlink_rcac_pos_vel_variables_t, alpha_pid_pos) }, \
         { "rcac_pos_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 36, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_0) }, \
         { "rcac_pos_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 40, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_1) }, \
         { "rcac_pos_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 44, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_z_2) }, \
         { "rcac_pos_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 48, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_0) }, \
         { "rcac_pos_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 52, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_1) }, \
         { "rcac_pos_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 56, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_u_2) }, \
         { "rcac_pos_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 60, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_0) }, \
         { "rcac_pos_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 64, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_1) }, \
         { "rcac_pos_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 68, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_pos_theta_2) }, \
         { "ii_vel", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_pos_vel_variables_t, ii_vel) }, \
         { "switch_vel", NULL, MAVLINK_TYPE_UINT8_T, 0, 181, offsetof(mavlink_rcac_pos_vel_variables_t, switch_vel) }, \
         { "alpha_pid_vel", NULL, MAVLINK_TYPE_FLOAT, 0, 72, offsetof(mavlink_rcac_pos_vel_variables_t, alpha_pid_vel) }, \
         { "rcac_vel_z_0", NULL, MAVLINK_TYPE_FLOAT, 0, 76, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_0) }, \
         { "rcac_vel_z_1", NULL, MAVLINK_TYPE_FLOAT, 0, 80, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_1) }, \
         { "rcac_vel_z_2", NULL, MAVLINK_TYPE_FLOAT, 0, 84, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_z_2) }, \
         { "rcac_vel_u_0", NULL, MAVLINK_TYPE_FLOAT, 0, 88, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_0) }, \
         { "rcac_vel_u_1", NULL, MAVLINK_TYPE_FLOAT, 0, 92, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_1) }, \
         { "rcac_vel_u_2", NULL, MAVLINK_TYPE_FLOAT, 0, 96, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_u_2) }, \
         { "rcac_vel_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 100, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_0) }, \
         { "rcac_vel_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 104, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_1) }, \
         { "rcac_vel_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 108, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_2) }, \
         { "rcac_vel_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 112, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_3) }, \
         { "rcac_vel_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 116, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_4) }, \
         { "rcac_vel_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 120, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_5) }, \
         { "rcac_vel_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 124, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_6) }, \
         { "rcac_vel_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 128, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_7) }, \
         { "rcac_vel_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 132, offsetof(mavlink_rcac_pos_vel_variables_t, rcac_vel_theta_8) }, \
         { "px4_ol_theta_0", NULL, MAVLINK_TYPE_FLOAT, 0, 136, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_0) }, \
         { "px4_ol_theta_1", NULL, MAVLINK_TYPE_FLOAT, 0, 140, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_1) }, \
         { "px4_ol_theta_2", NULL, MAVLINK_TYPE_FLOAT, 0, 144, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_2) }, \
         { "px4_ol_theta_3", NULL, MAVLINK_TYPE_FLOAT, 0, 148, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_3) }, \
         { "px4_ol_theta_4", NULL, MAVLINK_TYPE_FLOAT, 0, 152, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_4) }, \
         { "px4_ol_theta_5", NULL, MAVLINK_TYPE_FLOAT, 0, 156, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_5) }, \
         { "px4_ol_theta_6", NULL, MAVLINK_TYPE_FLOAT, 0, 160, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_6) }, \
         { "px4_ol_theta_7", NULL, MAVLINK_TYPE_FLOAT, 0, 164, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_7) }, \
         { "px4_ol_theta_8", NULL, MAVLINK_TYPE_FLOAT, 0, 168, offsetof(mavlink_rcac_pos_vel_variables_t, px4_ol_theta_8) }, \
         { "p11_pos", NULL, MAVLINK_TYPE_FLOAT, 0, 172, offsetof(mavlink_rcac_pos_vel_variables_t, p11_pos) }, \
         { "p11_velx", NULL, MAVLINK_TYPE_FLOAT, 0, 176, offsetof(mavlink_rcac_pos_vel_variables_t, p11_velx) }, \
         } \
}
#endif

/**
 * @brief Pack a rcac_pos_vel_variables message
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 *
 * @param timestamp  Time since system start
 * @param pid_factor  PID scaling
 * @param rcac_master_sw  Master RCAC switch
 * @param ii_pos  iteration step of the RCAC Position Controller
 * @param switch_pos  RCAC Position Controller switch
 * @param alpha_pid_pos  Gain multiplied by the PID position gains
 * @param rcac_pos_z_0  Performance variable for the Position Controller 0
 * @param rcac_pos_z_1  Performance variable for the Position Controller 1
 * @param rcac_pos_z_2  Performance variable for the Position Controller 2
 * @param rcac_pos_u_0  Control generated by the Position Controller 0
 * @param rcac_pos_u_1  Control generated by the Position Controller 1
 * @param rcac_pos_u_2  Control generated by the Position Controller 2
 * @param rcac_pos_theta_0  P gains for the Position Controller 0
 * @param rcac_pos_theta_1  P gains for the Position Controller 1
 * @param rcac_pos_theta_2  P gains for the Position Controller 2
 * @param ii_vel  iteration step of the RCAC Velocity Controller
 * @param switch_vel  RCAC Velocity Controller switch
 * @param alpha_pid_vel  Gain multiplied by the PID velocity gains
 * @param rcac_vel_z_0  Performance variable for the Velocity Controller 0
 * @param rcac_vel_z_1  Performance variable for the Velocity Controller 1
 * @param rcac_vel_z_2  Performance variable for the Velocity Controller 2
 * @param rcac_vel_u_0  Control generated by the Velocity Controller 0
 * @param rcac_vel_u_1  Control generated by the Velocity Controller 1
 * @param rcac_vel_u_2  Control generated by the Velocity Controller 2
 * @param rcac_vel_theta_0  PID gains for the Velocity Controller 0
 * @param rcac_vel_theta_1  PID gains for the Velocity Controller 1
 * @param rcac_vel_theta_2  PID gains for the Velocity Controller 2
 * @param rcac_vel_theta_3  PID gains for the Velocity Controller 3
 * @param rcac_vel_theta_4  PID gains for the Velocity Controller 4
 * @param rcac_vel_theta_5  PID gains for the Velocity Controller 5
 * @param rcac_vel_theta_6  PID gains for the Velocity Controller 6
 * @param rcac_vel_theta_7  PID gains for the Velocity Controller 7
 * @param rcac_vel_theta_8  PID gains for the Velocity Controller 8
 * @param px4_ol_theta_0  P and PID gains for the PX4 outer loop Controller 0
 * @param px4_ol_theta_1  P and PID gains for the PX4 outer loop Controller 1
 * @param px4_ol_theta_2  P and PID gains for the PX4 outer loop Controller 2
 * @param px4_ol_theta_3  P and PID gains for the PX4 outer loop Controller 3
 * @param px4_ol_theta_4  P and PID gains for the PX4 outer loop Controller 4
 * @param px4_ol_theta_5  P and PID gains for the PX4 outer loop Controller 5
 * @param px4_ol_theta_6  P and PID gains for the PX4 outer loop Controller 6
 * @param px4_ol_theta_7  P and PID gains for the PX4 outer loop Controller 7
 * @param px4_ol_theta_8  P and PID gains for the PX4 outer loop Controller 8
 * @param p11_pos  P(1,1) of the RCAC Position Controllerr
 * @param p11_velx  P(1,1) of the RCAC Velocity Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_pos_vel_variables_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t timestamp, float pid_factor, float rcac_master_sw, uint64_t ii_pos, uint8_t switch_pos, float alpha_pid_pos, float rcac_pos_z_0, float rcac_pos_z_1, float rcac_pos_z_2, float rcac_pos_u_0, float rcac_pos_u_1, float rcac_pos_u_2, float rcac_pos_theta_0, float rcac_pos_theta_1, float rcac_pos_theta_2, uint64_t ii_vel, uint8_t switch_vel, float alpha_pid_vel, float rcac_vel_z_0, float rcac_vel_z_1, float rcac_vel_z_2, float rcac_vel_u_0, float rcac_vel_u_1, float rcac_vel_u_2, float rcac_vel_theta_0, float rcac_vel_theta_1, float rcac_vel_theta_2, float rcac_vel_theta_3, float rcac_vel_theta_4, float rcac_vel_theta_5, float rcac_vel_theta_6, float rcac_vel_theta_7, float rcac_vel_theta_8, float px4_ol_theta_0, float px4_ol_theta_1, float px4_ol_theta_2, float px4_ol_theta_3, float px4_ol_theta_4, float px4_ol_theta_5, float px4_ol_theta_6, float px4_ol_theta_7, float px4_ol_theta_8, float p11_pos, float p11_velx)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_pos);
    _mav_put_uint64_t(buf, 16, ii_vel);
    _mav_put_float(buf, 24, pid_factor);
    _mav_put_float(buf, 28, rcac_master_sw);
    _mav_put_float(buf, 32, alpha_pid_pos);
    _mav_put_float(buf, 36, rcac_pos_z_0);
    _mav_put_float(buf, 40, rcac_pos_z_1);
    _mav_put_float(buf, 44, rcac_pos_z_2);
    _mav_put_float(buf, 48, rcac_pos_u_0);
    _mav_put_float(buf, 52, rcac_pos_u_1);
    _mav_put_float(buf, 56, rcac_pos_u_2);
    _mav_put_float(buf, 60, rcac_pos_theta_0);
    _mav_put_float(buf, 64, rcac_pos_theta_1);
    _mav_put_float(buf, 68, rcac_pos_theta_2);
    _mav_put_float(buf, 72, alpha_pid_vel);
    _mav_put_float(buf, 76, rcac_vel_z_0);
    _mav_put_float(buf, 80, rcac_vel_z_1);
    _mav_put_float(buf, 84, rcac_vel_z_2);
    _mav_put_float(buf, 88, rcac_vel_u_0);
    _mav_put_float(buf, 92, rcac_vel_u_1);
    _mav_put_float(buf, 96, rcac_vel_u_2);
    _mav_put_float(buf, 100, rcac_vel_theta_0);
    _mav_put_float(buf, 104, rcac_vel_theta_1);
    _mav_put_float(buf, 108, rcac_vel_theta_2);
    _mav_put_float(buf, 112, rcac_vel_theta_3);
    _mav_put_float(buf, 116, rcac_vel_theta_4);
    _mav_put_float(buf, 120, rcac_vel_theta_5);
    _mav_put_float(buf, 124, rcac_vel_theta_6);
    _mav_put_float(buf, 128, rcac_vel_theta_7);
    _mav_put_float(buf, 132, rcac_vel_theta_8);
    _mav_put_float(buf, 136, px4_ol_theta_0);
    _mav_put_float(buf, 140, px4_ol_theta_1);
    _mav_put_float(buf, 144, px4_ol_theta_2);
    _mav_put_float(buf, 148, px4_ol_theta_3);
    _mav_put_float(buf, 152, px4_ol_theta_4);
    _mav_put_float(buf, 156, px4_ol_theta_5);
    _mav_put_float(buf, 160, px4_ol_theta_6);
    _mav_put_float(buf, 164, px4_ol_theta_7);
    _mav_put_float(buf, 168, px4_ol_theta_8);
    _mav_put_float(buf, 172, p11_pos);
    _mav_put_float(buf, 176, p11_velx);
    _mav_put_uint8_t(buf, 180, switch_pos);
    _mav_put_uint8_t(buf, 181, switch_vel);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN);
#else
    mavlink_rcac_pos_vel_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_pos = ii_pos;
    packet.ii_vel = ii_vel;
    packet.pid_factor = pid_factor;
    packet.rcac_master_sw = rcac_master_sw;
    packet.alpha_pid_pos = alpha_pid_pos;
    packet.rcac_pos_z_0 = rcac_pos_z_0;
    packet.rcac_pos_z_1 = rcac_pos_z_1;
    packet.rcac_pos_z_2 = rcac_pos_z_2;
    packet.rcac_pos_u_0 = rcac_pos_u_0;
    packet.rcac_pos_u_1 = rcac_pos_u_1;
    packet.rcac_pos_u_2 = rcac_pos_u_2;
    packet.rcac_pos_theta_0 = rcac_pos_theta_0;
    packet.rcac_pos_theta_1 = rcac_pos_theta_1;
    packet.rcac_pos_theta_2 = rcac_pos_theta_2;
    packet.alpha_pid_vel = alpha_pid_vel;
    packet.rcac_vel_z_0 = rcac_vel_z_0;
    packet.rcac_vel_z_1 = rcac_vel_z_1;
    packet.rcac_vel_z_2 = rcac_vel_z_2;
    packet.rcac_vel_u_0 = rcac_vel_u_0;
    packet.rcac_vel_u_1 = rcac_vel_u_1;
    packet.rcac_vel_u_2 = rcac_vel_u_2;
    packet.rcac_vel_theta_0 = rcac_vel_theta_0;
    packet.rcac_vel_theta_1 = rcac_vel_theta_1;
    packet.rcac_vel_theta_2 = rcac_vel_theta_2;
    packet.rcac_vel_theta_3 = rcac_vel_theta_3;
    packet.rcac_vel_theta_4 = rcac_vel_theta_4;
    packet.rcac_vel_theta_5 = rcac_vel_theta_5;
    packet.rcac_vel_theta_6 = rcac_vel_theta_6;
    packet.rcac_vel_theta_7 = rcac_vel_theta_7;
    packet.rcac_vel_theta_8 = rcac_vel_theta_8;
    packet.px4_ol_theta_0 = px4_ol_theta_0;
    packet.px4_ol_theta_1 = px4_ol_theta_1;
    packet.px4_ol_theta_2 = px4_ol_theta_2;
    packet.px4_ol_theta_3 = px4_ol_theta_3;
    packet.px4_ol_theta_4 = px4_ol_theta_4;
    packet.px4_ol_theta_5 = px4_ol_theta_5;
    packet.px4_ol_theta_6 = px4_ol_theta_6;
    packet.px4_ol_theta_7 = px4_ol_theta_7;
    packet.px4_ol_theta_8 = px4_ol_theta_8;
    packet.p11_pos = p11_pos;
    packet.p11_velx = p11_velx;
    packet.switch_pos = switch_pos;
    packet.switch_vel = switch_vel;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES;
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
}

/**
 * @brief Pack a rcac_pos_vel_variables message on a channel
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param timestamp  Time since system start
 * @param pid_factor  PID scaling
 * @param rcac_master_sw  Master RCAC switch
 * @param ii_pos  iteration step of the RCAC Position Controller
 * @param switch_pos  RCAC Position Controller switch
 * @param alpha_pid_pos  Gain multiplied by the PID position gains
 * @param rcac_pos_z_0  Performance variable for the Position Controller 0
 * @param rcac_pos_z_1  Performance variable for the Position Controller 1
 * @param rcac_pos_z_2  Performance variable for the Position Controller 2
 * @param rcac_pos_u_0  Control generated by the Position Controller 0
 * @param rcac_pos_u_1  Control generated by the Position Controller 1
 * @param rcac_pos_u_2  Control generated by the Position Controller 2
 * @param rcac_pos_theta_0  P gains for the Position Controller 0
 * @param rcac_pos_theta_1  P gains for the Position Controller 1
 * @param rcac_pos_theta_2  P gains for the Position Controller 2
 * @param ii_vel  iteration step of the RCAC Velocity Controller
 * @param switch_vel  RCAC Velocity Controller switch
 * @param alpha_pid_vel  Gain multiplied by the PID velocity gains
 * @param rcac_vel_z_0  Performance variable for the Velocity Controller 0
 * @param rcac_vel_z_1  Performance variable for the Velocity Controller 1
 * @param rcac_vel_z_2  Performance variable for the Velocity Controller 2
 * @param rcac_vel_u_0  Control generated by the Velocity Controller 0
 * @param rcac_vel_u_1  Control generated by the Velocity Controller 1
 * @param rcac_vel_u_2  Control generated by the Velocity Controller 2
 * @param rcac_vel_theta_0  PID gains for the Velocity Controller 0
 * @param rcac_vel_theta_1  PID gains for the Velocity Controller 1
 * @param rcac_vel_theta_2  PID gains for the Velocity Controller 2
 * @param rcac_vel_theta_3  PID gains for the Velocity Controller 3
 * @param rcac_vel_theta_4  PID gains for the Velocity Controller 4
 * @param rcac_vel_theta_5  PID gains for the Velocity Controller 5
 * @param rcac_vel_theta_6  PID gains for the Velocity Controller 6
 * @param rcac_vel_theta_7  PID gains for the Velocity Controller 7
 * @param rcac_vel_theta_8  PID gains for the Velocity Controller 8
 * @param px4_ol_theta_0  P and PID gains for the PX4 outer loop Controller 0
 * @param px4_ol_theta_1  P and PID gains for the PX4 outer loop Controller 1
 * @param px4_ol_theta_2  P and PID gains for the PX4 outer loop Controller 2
 * @param px4_ol_theta_3  P and PID gains for the PX4 outer loop Controller 3
 * @param px4_ol_theta_4  P and PID gains for the PX4 outer loop Controller 4
 * @param px4_ol_theta_5  P and PID gains for the PX4 outer loop Controller 5
 * @param px4_ol_theta_6  P and PID gains for the PX4 outer loop Controller 6
 * @param px4_ol_theta_7  P and PID gains for the PX4 outer loop Controller 7
 * @param px4_ol_theta_8  P and PID gains for the PX4 outer loop Controller 8
 * @param p11_pos  P(1,1) of the RCAC Position Controllerr
 * @param p11_velx  P(1,1) of the RCAC Velocity Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_pos_vel_variables_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t timestamp,float pid_factor,float rcac_master_sw,uint64_t ii_pos,uint8_t switch_pos,float alpha_pid_pos,float rcac_pos_z_0,float rcac_pos_z_1,float rcac_pos_z_2,float rcac_pos_u_0,float rcac_pos_u_1,float rcac_pos_u_2,float rcac_pos_theta_0,float rcac_pos_theta_1,float rcac_pos_theta_2,uint64_t ii_vel,uint8_t switch_vel,float alpha_pid_vel,float rcac_vel_z_0,float rcac_vel_z_1,float rcac_vel_z_2,float rcac_vel_u_0,float rcac_vel_u_1,float rcac_vel_u_2,float rcac_vel_theta_0,float rcac_vel_theta_1,float rcac_vel_theta_2,float rcac_vel_theta_3,float rcac_vel_theta_4,float rcac_vel_theta_5,float rcac_vel_theta_6,float rcac_vel_theta_7,float rcac_vel_theta_8,float px4_ol_theta_0,float px4_ol_theta_1,float px4_ol_theta_2,float px4_ol_theta_3,float px4_ol_theta_4,float px4_ol_theta_5,float px4_ol_theta_6,float px4_ol_theta_7,float px4_ol_theta_8,float p11_pos,float p11_velx)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_pos);
    _mav_put_uint64_t(buf, 16, ii_vel);
    _mav_put_float(buf, 24, pid_factor);
    _mav_put_float(buf, 28, rcac_master_sw);
    _mav_put_float(buf, 32, alpha_pid_pos);
    _mav_put_float(buf, 36, rcac_pos_z_0);
    _mav_put_float(buf, 40, rcac_pos_z_1);
    _mav_put_float(buf, 44, rcac_pos_z_2);
    _mav_put_float(buf, 48, rcac_pos_u_0);
    _mav_put_float(buf, 52, rcac_pos_u_1);
    _mav_put_float(buf, 56, rcac_pos_u_2);
    _mav_put_float(buf, 60, rcac_pos_theta_0);
    _mav_put_float(buf, 64, rcac_pos_theta_1);
    _mav_put_float(buf, 68, rcac_pos_theta_2);
    _mav_put_float(buf, 72, alpha_pid_vel);
    _mav_put_float(buf, 76, rcac_vel_z_0);
    _mav_put_float(buf, 80, rcac_vel_z_1);
    _mav_put_float(buf, 84, rcac_vel_z_2);
    _mav_put_float(buf, 88, rcac_vel_u_0);
    _mav_put_float(buf, 92, rcac_vel_u_1);
    _mav_put_float(buf, 96, rcac_vel_u_2);
    _mav_put_float(buf, 100, rcac_vel_theta_0);
    _mav_put_float(buf, 104, rcac_vel_theta_1);
    _mav_put_float(buf, 108, rcac_vel_theta_2);
    _mav_put_float(buf, 112, rcac_vel_theta_3);
    _mav_put_float(buf, 116, rcac_vel_theta_4);
    _mav_put_float(buf, 120, rcac_vel_theta_5);
    _mav_put_float(buf, 124, rcac_vel_theta_6);
    _mav_put_float(buf, 128, rcac_vel_theta_7);
    _mav_put_float(buf, 132, rcac_vel_theta_8);
    _mav_put_float(buf, 136, px4_ol_theta_0);
    _mav_put_float(buf, 140, px4_ol_theta_1);
    _mav_put_float(buf, 144, px4_ol_theta_2);
    _mav_put_float(buf, 148, px4_ol_theta_3);
    _mav_put_float(buf, 152, px4_ol_theta_4);
    _mav_put_float(buf, 156, px4_ol_theta_5);
    _mav_put_float(buf, 160, px4_ol_theta_6);
    _mav_put_float(buf, 164, px4_ol_theta_7);
    _mav_put_float(buf, 168, px4_ol_theta_8);
    _mav_put_float(buf, 172, p11_pos);
    _mav_put_float(buf, 176, p11_velx);
    _mav_put_uint8_t(buf, 180, switch_pos);
    _mav_put_uint8_t(buf, 181, switch_vel);

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN);
#else
    mavlink_rcac_pos_vel_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_pos = ii_pos;
    packet.ii_vel = ii_vel;
    packet.pid_factor = pid_factor;
    packet.rcac_master_sw = rcac_master_sw;
    packet.alpha_pid_pos = alpha_pid_pos;
    packet.rcac_pos_z_0 = rcac_pos_z_0;
    packet.rcac_pos_z_1 = rcac_pos_z_1;
    packet.rcac_pos_z_2 = rcac_pos_z_2;
    packet.rcac_pos_u_0 = rcac_pos_u_0;
    packet.rcac_pos_u_1 = rcac_pos_u_1;
    packet.rcac_pos_u_2 = rcac_pos_u_2;
    packet.rcac_pos_theta_0 = rcac_pos_theta_0;
    packet.rcac_pos_theta_1 = rcac_pos_theta_1;
    packet.rcac_pos_theta_2 = rcac_pos_theta_2;
    packet.alpha_pid_vel = alpha_pid_vel;
    packet.rcac_vel_z_0 = rcac_vel_z_0;
    packet.rcac_vel_z_1 = rcac_vel_z_1;
    packet.rcac_vel_z_2 = rcac_vel_z_2;
    packet.rcac_vel_u_0 = rcac_vel_u_0;
    packet.rcac_vel_u_1 = rcac_vel_u_1;
    packet.rcac_vel_u_2 = rcac_vel_u_2;
    packet.rcac_vel_theta_0 = rcac_vel_theta_0;
    packet.rcac_vel_theta_1 = rcac_vel_theta_1;
    packet.rcac_vel_theta_2 = rcac_vel_theta_2;
    packet.rcac_vel_theta_3 = rcac_vel_theta_3;
    packet.rcac_vel_theta_4 = rcac_vel_theta_4;
    packet.rcac_vel_theta_5 = rcac_vel_theta_5;
    packet.rcac_vel_theta_6 = rcac_vel_theta_6;
    packet.rcac_vel_theta_7 = rcac_vel_theta_7;
    packet.rcac_vel_theta_8 = rcac_vel_theta_8;
    packet.px4_ol_theta_0 = px4_ol_theta_0;
    packet.px4_ol_theta_1 = px4_ol_theta_1;
    packet.px4_ol_theta_2 = px4_ol_theta_2;
    packet.px4_ol_theta_3 = px4_ol_theta_3;
    packet.px4_ol_theta_4 = px4_ol_theta_4;
    packet.px4_ol_theta_5 = px4_ol_theta_5;
    packet.px4_ol_theta_6 = px4_ol_theta_6;
    packet.px4_ol_theta_7 = px4_ol_theta_7;
    packet.px4_ol_theta_8 = px4_ol_theta_8;
    packet.p11_pos = p11_pos;
    packet.p11_velx = p11_velx;
    packet.switch_pos = switch_pos;
    packet.switch_vel = switch_vel;

        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
}

/**
 * @brief Encode a rcac_pos_vel_variables struct
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param rcac_pos_vel_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_pos_vel_variables_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rcac_pos_vel_variables_t* rcac_pos_vel_variables)
{
    return mavlink_msg_rcac_pos_vel_variables_pack(system_id, component_id, msg, rcac_pos_vel_variables->timestamp, rcac_pos_vel_variables->pid_factor, rcac_pos_vel_variables->rcac_master_sw, rcac_pos_vel_variables->ii_pos, rcac_pos_vel_variables->switch_pos, rcac_pos_vel_variables->alpha_pid_pos, rcac_pos_vel_variables->rcac_pos_z_0, rcac_pos_vel_variables->rcac_pos_z_1, rcac_pos_vel_variables->rcac_pos_z_2, rcac_pos_vel_variables->rcac_pos_u_0, rcac_pos_vel_variables->rcac_pos_u_1, rcac_pos_vel_variables->rcac_pos_u_2, rcac_pos_vel_variables->rcac_pos_theta_0, rcac_pos_vel_variables->rcac_pos_theta_1, rcac_pos_vel_variables->rcac_pos_theta_2, rcac_pos_vel_variables->ii_vel, rcac_pos_vel_variables->switch_vel, rcac_pos_vel_variables->alpha_pid_vel, rcac_pos_vel_variables->rcac_vel_z_0, rcac_pos_vel_variables->rcac_vel_z_1, rcac_pos_vel_variables->rcac_vel_z_2, rcac_pos_vel_variables->rcac_vel_u_0, rcac_pos_vel_variables->rcac_vel_u_1, rcac_pos_vel_variables->rcac_vel_u_2, rcac_pos_vel_variables->rcac_vel_theta_0, rcac_pos_vel_variables->rcac_vel_theta_1, rcac_pos_vel_variables->rcac_vel_theta_2, rcac_pos_vel_variables->rcac_vel_theta_3, rcac_pos_vel_variables->rcac_vel_theta_4, rcac_pos_vel_variables->rcac_vel_theta_5, rcac_pos_vel_variables->rcac_vel_theta_6, rcac_pos_vel_variables->rcac_vel_theta_7, rcac_pos_vel_variables->rcac_vel_theta_8, rcac_pos_vel_variables->px4_ol_theta_0, rcac_pos_vel_variables->px4_ol_theta_1, rcac_pos_vel_variables->px4_ol_theta_2, rcac_pos_vel_variables->px4_ol_theta_3, rcac_pos_vel_variables->px4_ol_theta_4, rcac_pos_vel_variables->px4_ol_theta_5, rcac_pos_vel_variables->px4_ol_theta_6, rcac_pos_vel_variables->px4_ol_theta_7, rcac_pos_vel_variables->px4_ol_theta_8, rcac_pos_vel_variables->p11_pos, rcac_pos_vel_variables->p11_velx);
}

/**
 * @brief Encode a rcac_pos_vel_variables struct on a channel
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param rcac_pos_vel_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_pos_vel_variables_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rcac_pos_vel_variables_t* rcac_pos_vel_variables)
{
    return mavlink_msg_rcac_pos_vel_variables_pack_chan(system_id, component_id, chan, msg, rcac_pos_vel_variables->timestamp, rcac_pos_vel_variables->pid_factor, rcac_pos_vel_variables->rcac_master_sw, rcac_pos_vel_variables->ii_pos, rcac_pos_vel_variables->switch_pos, rcac_pos_vel_variables->alpha_pid_pos, rcac_pos_vel_variables->rcac_pos_z_0, rcac_pos_vel_variables->rcac_pos_z_1, rcac_pos_vel_variables->rcac_pos_z_2, rcac_pos_vel_variables->rcac_pos_u_0, rcac_pos_vel_variables->rcac_pos_u_1, rcac_pos_vel_variables->rcac_pos_u_2, rcac_pos_vel_variables->rcac_pos_theta_0, rcac_pos_vel_variables->rcac_pos_theta_1, rcac_pos_vel_variables->rcac_pos_theta_2, rcac_pos_vel_variables->ii_vel, rcac_pos_vel_variables->switch_vel, rcac_pos_vel_variables->alpha_pid_vel, rcac_pos_vel_variables->rcac_vel_z_0, rcac_pos_vel_variables->rcac_vel_z_1, rcac_pos_vel_variables->rcac_vel_z_2, rcac_pos_vel_variables->rcac_vel_u_0, rcac_pos_vel_variables->rcac_vel_u_1, rcac_pos_vel_variables->rcac_vel_u_2, rcac_pos_vel_variables->rcac_vel_theta_0, rcac_pos_vel_variables->rcac_vel_theta_1, rcac_pos_vel_variables->rcac_vel_theta_2, rcac_pos_vel_variables->rcac_vel_theta_3, rcac_pos_vel_variables->rcac_vel_theta_4, rcac_pos_vel_variables->rcac_vel_theta_5, rcac_pos_vel_variables->rcac_vel_theta_6, rcac_pos_vel_variables->rcac_vel_theta_7, rcac_pos_vel_variables->rcac_vel_theta_8, rcac_pos_vel_variables->px4_ol_theta_0, rcac_pos_vel_variables->px4_ol_theta_1, rcac_pos_vel_variables->px4_ol_theta_2, rcac_pos_vel_variables->px4_ol_theta_3, rcac_pos_vel_variables->px4_ol_theta_4, rcac_pos_vel_variables->px4_ol_theta_5, rcac_pos_vel_variables->px4_ol_theta_6, rcac_pos_vel_variables->px4_ol_theta_7, rcac_pos_vel_variables->px4_ol_theta_8, rcac_pos_vel_variables->p11_pos, rcac_pos_vel_variables->p11_velx);
}

/**
 * @brief Send a rcac_pos_vel_variables message
 * @param chan MAVLink channel to send the message
 *
 * @param timestamp  Time since system start
 * @param pid_factor  PID scaling
 * @param rcac_master_sw  Master RCAC switch
 * @param ii_pos  iteration step of the RCAC Position Controller
 * @param switch_pos  RCAC Position Controller switch
 * @param alpha_pid_pos  Gain multiplied by the PID position gains
 * @param rcac_pos_z_0  Performance variable for the Position Controller 0
 * @param rcac_pos_z_1  Performance variable for the Position Controller 1
 * @param rcac_pos_z_2  Performance variable for the Position Controller 2
 * @param rcac_pos_u_0  Control generated by the Position Controller 0
 * @param rcac_pos_u_1  Control generated by the Position Controller 1
 * @param rcac_pos_u_2  Control generated by the Position Controller 2
 * @param rcac_pos_theta_0  P gains for the Position Controller 0
 * @param rcac_pos_theta_1  P gains for the Position Controller 1
 * @param rcac_pos_theta_2  P gains for the Position Controller 2
 * @param ii_vel  iteration step of the RCAC Velocity Controller
 * @param switch_vel  RCAC Velocity Controller switch
 * @param alpha_pid_vel  Gain multiplied by the PID velocity gains
 * @param rcac_vel_z_0  Performance variable for the Velocity Controller 0
 * @param rcac_vel_z_1  Performance variable for the Velocity Controller 1
 * @param rcac_vel_z_2  Performance variable for the Velocity Controller 2
 * @param rcac_vel_u_0  Control generated by the Velocity Controller 0
 * @param rcac_vel_u_1  Control generated by the Velocity Controller 1
 * @param rcac_vel_u_2  Control generated by the Velocity Controller 2
 * @param rcac_vel_theta_0  PID gains for the Velocity Controller 0
 * @param rcac_vel_theta_1  PID gains for the Velocity Controller 1
 * @param rcac_vel_theta_2  PID gains for the Velocity Controller 2
 * @param rcac_vel_theta_3  PID gains for the Velocity Controller 3
 * @param rcac_vel_theta_4  PID gains for the Velocity Controller 4
 * @param rcac_vel_theta_5  PID gains for the Velocity Controller 5
 * @param rcac_vel_theta_6  PID gains for the Velocity Controller 6
 * @param rcac_vel_theta_7  PID gains for the Velocity Controller 7
 * @param rcac_vel_theta_8  PID gains for the Velocity Controller 8
 * @param px4_ol_theta_0  P and PID gains for the PX4 outer loop Controller 0
 * @param px4_ol_theta_1  P and PID gains for the PX4 outer loop Controller 1
 * @param px4_ol_theta_2  P and PID gains for the PX4 outer loop Controller 2
 * @param px4_ol_theta_3  P and PID gains for the PX4 outer loop Controller 3
 * @param px4_ol_theta_4  P and PID gains for the PX4 outer loop Controller 4
 * @param px4_ol_theta_5  P and PID gains for the PX4 outer loop Controller 5
 * @param px4_ol_theta_6  P and PID gains for the PX4 outer loop Controller 6
 * @param px4_ol_theta_7  P and PID gains for the PX4 outer loop Controller 7
 * @param px4_ol_theta_8  P and PID gains for the PX4 outer loop Controller 8
 * @param p11_pos  P(1,1) of the RCAC Position Controllerr
 * @param p11_velx  P(1,1) of the RCAC Velocity Controller
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rcac_pos_vel_variables_send(mavlink_channel_t chan, uint64_t timestamp, float pid_factor, float rcac_master_sw, uint64_t ii_pos, uint8_t switch_pos, float alpha_pid_pos, float rcac_pos_z_0, float rcac_pos_z_1, float rcac_pos_z_2, float rcac_pos_u_0, float rcac_pos_u_1, float rcac_pos_u_2, float rcac_pos_theta_0, float rcac_pos_theta_1, float rcac_pos_theta_2, uint64_t ii_vel, uint8_t switch_vel, float alpha_pid_vel, float rcac_vel_z_0, float rcac_vel_z_1, float rcac_vel_z_2, float rcac_vel_u_0, float rcac_vel_u_1, float rcac_vel_u_2, float rcac_vel_theta_0, float rcac_vel_theta_1, float rcac_vel_theta_2, float rcac_vel_theta_3, float rcac_vel_theta_4, float rcac_vel_theta_5, float rcac_vel_theta_6, float rcac_vel_theta_7, float rcac_vel_theta_8, float px4_ol_theta_0, float px4_ol_theta_1, float px4_ol_theta_2, float px4_ol_theta_3, float px4_ol_theta_4, float px4_ol_theta_5, float px4_ol_theta_6, float px4_ol_theta_7, float px4_ol_theta_8, float p11_pos, float p11_velx)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_pos);
    _mav_put_uint64_t(buf, 16, ii_vel);
    _mav_put_float(buf, 24, pid_factor);
    _mav_put_float(buf, 28, rcac_master_sw);
    _mav_put_float(buf, 32, alpha_pid_pos);
    _mav_put_float(buf, 36, rcac_pos_z_0);
    _mav_put_float(buf, 40, rcac_pos_z_1);
    _mav_put_float(buf, 44, rcac_pos_z_2);
    _mav_put_float(buf, 48, rcac_pos_u_0);
    _mav_put_float(buf, 52, rcac_pos_u_1);
    _mav_put_float(buf, 56, rcac_pos_u_2);
    _mav_put_float(buf, 60, rcac_pos_theta_0);
    _mav_put_float(buf, 64, rcac_pos_theta_1);
    _mav_put_float(buf, 68, rcac_pos_theta_2);
    _mav_put_float(buf, 72, alpha_pid_vel);
    _mav_put_float(buf, 76, rcac_vel_z_0);
    _mav_put_float(buf, 80, rcac_vel_z_1);
    _mav_put_float(buf, 84, rcac_vel_z_2);
    _mav_put_float(buf, 88, rcac_vel_u_0);
    _mav_put_float(buf, 92, rcac_vel_u_1);
    _mav_put_float(buf, 96, rcac_vel_u_2);
    _mav_put_float(buf, 100, rcac_vel_theta_0);
    _mav_put_float(buf, 104, rcac_vel_theta_1);
    _mav_put_float(buf, 108, rcac_vel_theta_2);
    _mav_put_float(buf, 112, rcac_vel_theta_3);
    _mav_put_float(buf, 116, rcac_vel_theta_4);
    _mav_put_float(buf, 120, rcac_vel_theta_5);
    _mav_put_float(buf, 124, rcac_vel_theta_6);
    _mav_put_float(buf, 128, rcac_vel_theta_7);
    _mav_put_float(buf, 132, rcac_vel_theta_8);
    _mav_put_float(buf, 136, px4_ol_theta_0);
    _mav_put_float(buf, 140, px4_ol_theta_1);
    _mav_put_float(buf, 144, px4_ol_theta_2);
    _mav_put_float(buf, 148, px4_ol_theta_3);
    _mav_put_float(buf, 152, px4_ol_theta_4);
    _mav_put_float(buf, 156, px4_ol_theta_5);
    _mav_put_float(buf, 160, px4_ol_theta_6);
    _mav_put_float(buf, 164, px4_ol_theta_7);
    _mav_put_float(buf, 168, px4_ol_theta_8);
    _mav_put_float(buf, 172, p11_pos);
    _mav_put_float(buf, 176, p11_velx);
    _mav_put_uint8_t(buf, 180, switch_pos);
    _mav_put_uint8_t(buf, 181, switch_vel);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
#else
    mavlink_rcac_pos_vel_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_pos = ii_pos;
    packet.ii_vel = ii_vel;
    packet.pid_factor = pid_factor;
    packet.rcac_master_sw = rcac_master_sw;
    packet.alpha_pid_pos = alpha_pid_pos;
    packet.rcac_pos_z_0 = rcac_pos_z_0;
    packet.rcac_pos_z_1 = rcac_pos_z_1;
    packet.rcac_pos_z_2 = rcac_pos_z_2;
    packet.rcac_pos_u_0 = rcac_pos_u_0;
    packet.rcac_pos_u_1 = rcac_pos_u_1;
    packet.rcac_pos_u_2 = rcac_pos_u_2;
    packet.rcac_pos_theta_0 = rcac_pos_theta_0;
    packet.rcac_pos_theta_1 = rcac_pos_theta_1;
    packet.rcac_pos_theta_2 = rcac_pos_theta_2;
    packet.alpha_pid_vel = alpha_pid_vel;
    packet.rcac_vel_z_0 = rcac_vel_z_0;
    packet.rcac_vel_z_1 = rcac_vel_z_1;
    packet.rcac_vel_z_2 = rcac_vel_z_2;
    packet.rcac_vel_u_0 = rcac_vel_u_0;
    packet.rcac_vel_u_1 = rcac_vel_u_1;
    packet.rcac_vel_u_2 = rcac_vel_u_2;
    packet.rcac_vel_theta_0 = rcac_vel_theta_0;
    packet.rcac_vel_theta_1 = rcac_vel_theta_1;
    packet.rcac_vel_theta_2 = rcac_vel_theta_2;
    packet.rcac_vel_theta_3 = rcac_vel_theta_3;
    packet.rcac_vel_theta_4 = rcac_vel_theta_4;
    packet.rcac_vel_theta_5 = rcac_vel_theta_5;
    packet.rcac_vel_theta_6 = rcac_vel_theta_6;
    packet.rcac_vel_theta_7 = rcac_vel_theta_7;
    packet.rcac_vel_theta_8 = rcac_vel_theta_8;
    packet.px4_ol_theta_0 = px4_ol_theta_0;
    packet.px4_ol_theta_1 = px4_ol_theta_1;
    packet.px4_ol_theta_2 = px4_ol_theta_2;
    packet.px4_ol_theta_3 = px4_ol_theta_3;
    packet.px4_ol_theta_4 = px4_ol_theta_4;
    packet.px4_ol_theta_5 = px4_ol_theta_5;
    packet.px4_ol_theta_6 = px4_ol_theta_6;
    packet.px4_ol_theta_7 = px4_ol_theta_7;
    packet.px4_ol_theta_8 = px4_ol_theta_8;
    packet.p11_pos = p11_pos;
    packet.p11_velx = p11_velx;
    packet.switch_pos = switch_pos;
    packet.switch_vel = switch_vel;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES, (const char *)&packet, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
#endif
}

/**
 * @brief Send a rcac_pos_vel_variables message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_rcac_pos_vel_variables_send_struct(mavlink_channel_t chan, const mavlink_rcac_pos_vel_variables_t* rcac_pos_vel_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_rcac_pos_vel_variables_send(chan, rcac_pos_vel_variables->timestamp, rcac_pos_vel_variables->pid_factor, rcac_pos_vel_variables->rcac_master_sw, rcac_pos_vel_variables->ii_pos, rcac_pos_vel_variables->switch_pos, rcac_pos_vel_variables->alpha_pid_pos, rcac_pos_vel_variables->rcac_pos_z_0, rcac_pos_vel_variables->rcac_pos_z_1, rcac_pos_vel_variables->rcac_pos_z_2, rcac_pos_vel_variables->rcac_pos_u_0, rcac_pos_vel_variables->rcac_pos_u_1, rcac_pos_vel_variables->rcac_pos_u_2, rcac_pos_vel_variables->rcac_pos_theta_0, rcac_pos_vel_variables->rcac_pos_theta_1, rcac_pos_vel_variables->rcac_pos_theta_2, rcac_pos_vel_variables->ii_vel, rcac_pos_vel_variables->switch_vel, rcac_pos_vel_variables->alpha_pid_vel, rcac_pos_vel_variables->rcac_vel_z_0, rcac_pos_vel_variables->rcac_vel_z_1, rcac_pos_vel_variables->rcac_vel_z_2, rcac_pos_vel_variables->rcac_vel_u_0, rcac_pos_vel_variables->rcac_vel_u_1, rcac_pos_vel_variables->rcac_vel_u_2, rcac_pos_vel_variables->rcac_vel_theta_0, rcac_pos_vel_variables->rcac_vel_theta_1, rcac_pos_vel_variables->rcac_vel_theta_2, rcac_pos_vel_variables->rcac_vel_theta_3, rcac_pos_vel_variables->rcac_vel_theta_4, rcac_pos_vel_variables->rcac_vel_theta_5, rcac_pos_vel_variables->rcac_vel_theta_6, rcac_pos_vel_variables->rcac_vel_theta_7, rcac_pos_vel_variables->rcac_vel_theta_8, rcac_pos_vel_variables->px4_ol_theta_0, rcac_pos_vel_variables->px4_ol_theta_1, rcac_pos_vel_variables->px4_ol_theta_2, rcac_pos_vel_variables->px4_ol_theta_3, rcac_pos_vel_variables->px4_ol_theta_4, rcac_pos_vel_variables->px4_ol_theta_5, rcac_pos_vel_variables->px4_ol_theta_6, rcac_pos_vel_variables->px4_ol_theta_7, rcac_pos_vel_variables->px4_ol_theta_8, rcac_pos_vel_variables->p11_pos, rcac_pos_vel_variables->p11_velx);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES, (const char *)rcac_pos_vel_variables, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
#endif
}

#if MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN <= MAVLINK_MAX_PAYLOAD_LEN
/*
  This varient of _send() can be used to save stack space by re-using
  memory from the receive buffer.  The caller provides a
  mavlink_message_t which is the size of a full mavlink message. This
  is usually the receive buffer for the channel, and allows a reply to an
  incoming message with minimum stack space usage.
 */
static inline void mavlink_msg_rcac_pos_vel_variables_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  uint64_t timestamp, float pid_factor, float rcac_master_sw, uint64_t ii_pos, uint8_t switch_pos, float alpha_pid_pos, float rcac_pos_z_0, float rcac_pos_z_1, float rcac_pos_z_2, float rcac_pos_u_0, float rcac_pos_u_1, float rcac_pos_u_2, float rcac_pos_theta_0, float rcac_pos_theta_1, float rcac_pos_theta_2, uint64_t ii_vel, uint8_t switch_vel, float alpha_pid_vel, float rcac_vel_z_0, float rcac_vel_z_1, float rcac_vel_z_2, float rcac_vel_u_0, float rcac_vel_u_1, float rcac_vel_u_2, float rcac_vel_theta_0, float rcac_vel_theta_1, float rcac_vel_theta_2, float rcac_vel_theta_3, float rcac_vel_theta_4, float rcac_vel_theta_5, float rcac_vel_theta_6, float rcac_vel_theta_7, float rcac_vel_theta_8, float px4_ol_theta_0, float px4_ol_theta_1, float px4_ol_theta_2, float px4_ol_theta_3, float px4_ol_theta_4, float px4_ol_theta_5, float px4_ol_theta_6, float px4_ol_theta_7, float px4_ol_theta_8, float p11_pos, float p11_velx)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char *buf = (char *)msgbuf;
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_pos);
    _mav_put_uint64_t(buf, 16, ii_vel);
    _mav_put_float(buf, 24, pid_factor);
    _mav_put_float(buf, 28, rcac_master_sw);
    _mav_put_float(buf, 32, alpha_pid_pos);
    _mav_put_float(buf, 36, rcac_pos_z_0);
    _mav_put_float(buf, 40, rcac_pos_z_1);
    _mav_put_float(buf, 44, rcac_pos_z_2);
    _mav_put_float(buf, 48, rcac_pos_u_0);
    _mav_put_float(buf, 52, rcac_pos_u_1);
    _mav_put_float(buf, 56, rcac_pos_u_2);
    _mav_put_float(buf, 60, rcac_pos_theta_0);
    _mav_put_float(buf, 64, rcac_pos_theta_1);
    _mav_put_float(buf, 68, rcac_pos_theta_2);
    _mav_put_float(buf, 72, alpha_pid_vel);
    _mav_put_float(buf, 76, rcac_vel_z_0);
    _mav_put_float(buf, 80, rcac_vel_z_1);
    _mav_put_float(buf, 84, rcac_vel_z_2);
    _mav_put_float(buf, 88, rcac_vel_u_0);
    _mav_put_float(buf, 92, rcac_vel_u_1);
    _mav_put_float(buf, 96, rcac_vel_u_2);
    _mav_put_float(buf, 100, rcac_vel_theta_0);
    _mav_put_float(buf, 104, rcac_vel_theta_1);
    _mav_put_float(buf, 108, rcac_vel_theta_2);
    _mav_put_float(buf, 112, rcac_vel_theta_3);
    _mav_put_float(buf, 116, rcac_vel_theta_4);
    _mav_put_float(buf, 120, rcac_vel_theta_5);
    _mav_put_float(buf, 124, rcac_vel_theta_6);
    _mav_put_float(buf, 128, rcac_vel_theta_7);
    _mav_put_float(buf, 132, rcac_vel_theta_8);
    _mav_put_float(buf, 136, px4_ol_theta_0);
    _mav_put_float(buf, 140, px4_ol_theta_1);
    _mav_put_float(buf, 144, px4_ol_theta_2);
    _mav_put_float(buf, 148, px4_ol_theta_3);
    _mav_put_float(buf, 152, px4_ol_theta_4);
    _mav_put_float(buf, 156, px4_ol_theta_5);
    _mav_put_float(buf, 160, px4_ol_theta_6);
    _mav_put_float(buf, 164, px4_ol_theta_7);
    _mav_put_float(buf, 168, px4_ol_theta_8);
    _mav_put_float(buf, 172, p11_pos);
    _mav_put_float(buf, 176, p11_velx);
    _mav_put_uint8_t(buf, 180, switch_pos);
    _mav_put_uint8_t(buf, 181, switch_vel);

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
#else
    mavlink_rcac_pos_vel_variables_t *packet = (mavlink_rcac_pos_vel_variables_t *)msgbuf;
    packet->timestamp = timestamp;
    packet->ii_pos = ii_pos;
    packet->ii_vel = ii_vel;
    packet->pid_factor = pid_factor;
    packet->rcac_master_sw = rcac_master_sw;
    packet->alpha_pid_pos = alpha_pid_pos;
    packet->rcac_pos_z_0 = rcac_pos_z_0;
    packet->rcac_pos_z_1 = rcac_pos_z_1;
    packet->rcac_pos_z_2 = rcac_pos_z_2;
    packet->rcac_pos_u_0 = rcac_pos_u_0;
    packet->rcac_pos_u_1 = rcac_pos_u_1;
    packet->rcac_pos_u_2 = rcac_pos_u_2;
    packet->rcac_pos_theta_0 = rcac_pos_theta_0;
    packet->rcac_pos_theta_1 = rcac_pos_theta_1;
    packet->rcac_pos_theta_2 = rcac_pos_theta_2;
    packet->alpha_pid_vel = alpha_pid_vel;
    packet->rcac_vel_z_0 = rcac_vel_z_0;
    packet->rcac_vel_z_1 = rcac_vel_z_1;
    packet->rcac_vel_z_2 = rcac_vel_z_2;
    packet->rcac_vel_u_0 = rcac_vel_u_0;
    packet->rcac_vel_u_1 = rcac_vel_u_1;
    packet->rcac_vel_u_2 = rcac_vel_u_2;
    packet->rcac_vel_theta_0 = rcac_vel_theta_0;
    packet->rcac_vel_theta_1 = rcac_vel_theta_1;
    packet->rcac_vel_theta_2 = rcac_vel_theta_2;
    packet->rcac_vel_theta_3 = rcac_vel_theta_3;
    packet->rcac_vel_theta_4 = rcac_vel_theta_4;
    packet->rcac_vel_theta_5 = rcac_vel_theta_5;
    packet->rcac_vel_theta_6 = rcac_vel_theta_6;
    packet->rcac_vel_theta_7 = rcac_vel_theta_7;
    packet->rcac_vel_theta_8 = rcac_vel_theta_8;
    packet->px4_ol_theta_0 = px4_ol_theta_0;
    packet->px4_ol_theta_1 = px4_ol_theta_1;
    packet->px4_ol_theta_2 = px4_ol_theta_2;
    packet->px4_ol_theta_3 = px4_ol_theta_3;
    packet->px4_ol_theta_4 = px4_ol_theta_4;
    packet->px4_ol_theta_5 = px4_ol_theta_5;
    packet->px4_ol_theta_6 = px4_ol_theta_6;
    packet->px4_ol_theta_7 = px4_ol_theta_7;
    packet->px4_ol_theta_8 = px4_ol_theta_8;
    packet->p11_pos = p11_pos;
    packet->p11_velx = p11_velx;
    packet->switch_pos = switch_pos;
    packet->switch_vel = switch_vel;

    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES, (const char *)packet, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_CRC);
#endif
}
#endif

#endif

// MESSAGE RCAC_POS_VEL_VARIABLES UNPACKING


/**
 * @brief Get field timestamp from rcac_pos_vel_variables message
 *
 * @return  Time since system start
 */
static inline uint64_t mavlink_msg_rcac_pos_vel_variables_get_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  0);
}

/**
 * @brief Get field pid_factor from rcac_pos_vel_variables message
 *
 * @return  PID scaling
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_pid_factor(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  24);
}

/**
 * @brief Get field rcac_master_sw from rcac_pos_vel_variables message
 *
 * @return  Master RCAC switch
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_master_sw(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  28);
}

/**
 * @brief Get field ii_pos from rcac_pos_vel_variables message
 *
 * @return  iteration step of the RCAC Position Controller
 */
static inline uint64_t mavlink_msg_rcac_pos_vel_variables_get_ii_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  8);
}

/**
 * @brief Get field switch_pos from rcac_pos_vel_variables message
 *
 * @return  RCAC Position Controller switch
 */
static inline uint8_t mavlink_msg_rcac_pos_vel_variables_get_switch_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  180);
}

/**
 * @brief Get field alpha_pid_pos from rcac_pos_vel_variables message
 *
 * @return  Gain multiplied by the PID position gains
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_alpha_pid_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  32);
}

/**
 * @brief Get field rcac_pos_z_0 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Position Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  36);
}

/**
 * @brief Get field rcac_pos_z_1 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Position Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  40);
}

/**
 * @brief Get field rcac_pos_z_2 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Position Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  44);
}

/**
 * @brief Get field rcac_pos_u_0 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Position Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  48);
}

/**
 * @brief Get field rcac_pos_u_1 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Position Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  52);
}

/**
 * @brief Get field rcac_pos_u_2 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Position Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  56);
}

/**
 * @brief Get field rcac_pos_theta_0 from rcac_pos_vel_variables message
 *
 * @return  P gains for the Position Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  60);
}

/**
 * @brief Get field rcac_pos_theta_1 from rcac_pos_vel_variables message
 *
 * @return  P gains for the Position Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  64);
}

/**
 * @brief Get field rcac_pos_theta_2 from rcac_pos_vel_variables message
 *
 * @return  P gains for the Position Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  68);
}

/**
 * @brief Get field ii_vel from rcac_pos_vel_variables message
 *
 * @return  iteration step of the RCAC Velocity Controller
 */
static inline uint64_t mavlink_msg_rcac_pos_vel_variables_get_ii_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  16);
}

/**
 * @brief Get field switch_vel from rcac_pos_vel_variables message
 *
 * @return  RCAC Velocity Controller switch
 */
static inline uint8_t mavlink_msg_rcac_pos_vel_variables_get_switch_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  181);
}

/**
 * @brief Get field alpha_pid_vel from rcac_pos_vel_variables message
 *
 * @return  Gain multiplied by the PID velocity gains
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_alpha_pid_vel(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  72);
}

/**
 * @brief Get field rcac_vel_z_0 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Velocity Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  76);
}

/**
 * @brief Get field rcac_vel_z_1 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Velocity Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  80);
}

/**
 * @brief Get field rcac_vel_z_2 from rcac_pos_vel_variables message
 *
 * @return  Performance variable for the Velocity Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  84);
}

/**
 * @brief Get field rcac_vel_u_0 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Velocity Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  88);
}

/**
 * @brief Get field rcac_vel_u_1 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Velocity Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  92);
}

/**
 * @brief Get field rcac_vel_u_2 from rcac_pos_vel_variables message
 *
 * @return  Control generated by the Velocity Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  96);
}

/**
 * @brief Get field rcac_vel_theta_0 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  100);
}

/**
 * @brief Get field rcac_vel_theta_1 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  104);
}

/**
 * @brief Get field rcac_vel_theta_2 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  108);
}

/**
 * @brief Get field rcac_vel_theta_3 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 3
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  112);
}

/**
 * @brief Get field rcac_vel_theta_4 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 4
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  116);
}

/**
 * @brief Get field rcac_vel_theta_5 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 5
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  120);
}

/**
 * @brief Get field rcac_vel_theta_6 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 6
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  124);
}

/**
 * @brief Get field rcac_vel_theta_7 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 7
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  128);
}

/**
 * @brief Get field rcac_vel_theta_8 from rcac_pos_vel_variables message
 *
 * @return  PID gains for the Velocity Controller 8
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_8(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  132);
}

/**
 * @brief Get field px4_ol_theta_0 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 0
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_0(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  136);
}

/**
 * @brief Get field px4_ol_theta_1 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 1
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_1(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  140);
}

/**
 * @brief Get field px4_ol_theta_2 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 2
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_2(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  144);
}

/**
 * @brief Get field px4_ol_theta_3 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 3
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_3(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  148);
}

/**
 * @brief Get field px4_ol_theta_4 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 4
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_4(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  152);
}

/**
 * @brief Get field px4_ol_theta_5 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 5
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_5(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  156);
}

/**
 * @brief Get field px4_ol_theta_6 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 6
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_6(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  160);
}

/**
 * @brief Get field px4_ol_theta_7 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 7
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_7(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  164);
}

/**
 * @brief Get field px4_ol_theta_8 from rcac_pos_vel_variables message
 *
 * @return  P and PID gains for the PX4 outer loop Controller 8
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_8(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  168);
}

/**
 * @brief Get field p11_pos from rcac_pos_vel_variables message
 *
 * @return  P(1,1) of the RCAC Position Controllerr
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_p11_pos(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  172);
}

/**
 * @brief Get field p11_velx from rcac_pos_vel_variables message
 *
 * @return  P(1,1) of the RCAC Velocity Controller
 */
static inline float mavlink_msg_rcac_pos_vel_variables_get_p11_velx(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  176);
}

/**
 * @brief Decode a rcac_pos_vel_variables message into a struct
 *
 * @param msg The message to decode
 * @param rcac_pos_vel_variables C-struct to decode the message contents into
 */
static inline void mavlink_msg_rcac_pos_vel_variables_decode(const mavlink_message_t* msg, mavlink_rcac_pos_vel_variables_t* rcac_pos_vel_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    rcac_pos_vel_variables->timestamp = mavlink_msg_rcac_pos_vel_variables_get_timestamp(msg);
    rcac_pos_vel_variables->ii_pos = mavlink_msg_rcac_pos_vel_variables_get_ii_pos(msg);
    rcac_pos_vel_variables->ii_vel = mavlink_msg_rcac_pos_vel_variables_get_ii_vel(msg);
    rcac_pos_vel_variables->pid_factor = mavlink_msg_rcac_pos_vel_variables_get_pid_factor(msg);
    rcac_pos_vel_variables->rcac_master_sw = mavlink_msg_rcac_pos_vel_variables_get_rcac_master_sw(msg);
    rcac_pos_vel_variables->alpha_pid_pos = mavlink_msg_rcac_pos_vel_variables_get_alpha_pid_pos(msg);
    rcac_pos_vel_variables->rcac_pos_z_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_0(msg);
    rcac_pos_vel_variables->rcac_pos_z_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_1(msg);
    rcac_pos_vel_variables->rcac_pos_z_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_z_2(msg);
    rcac_pos_vel_variables->rcac_pos_u_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_0(msg);
    rcac_pos_vel_variables->rcac_pos_u_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_1(msg);
    rcac_pos_vel_variables->rcac_pos_u_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_u_2(msg);
    rcac_pos_vel_variables->rcac_pos_theta_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_0(msg);
    rcac_pos_vel_variables->rcac_pos_theta_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_1(msg);
    rcac_pos_vel_variables->rcac_pos_theta_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_pos_theta_2(msg);
    rcac_pos_vel_variables->alpha_pid_vel = mavlink_msg_rcac_pos_vel_variables_get_alpha_pid_vel(msg);
    rcac_pos_vel_variables->rcac_vel_z_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_0(msg);
    rcac_pos_vel_variables->rcac_vel_z_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_1(msg);
    rcac_pos_vel_variables->rcac_vel_z_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_z_2(msg);
    rcac_pos_vel_variables->rcac_vel_u_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_0(msg);
    rcac_pos_vel_variables->rcac_vel_u_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_1(msg);
    rcac_pos_vel_variables->rcac_vel_u_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_u_2(msg);
    rcac_pos_vel_variables->rcac_vel_theta_0 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_0(msg);
    rcac_pos_vel_variables->rcac_vel_theta_1 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_1(msg);
    rcac_pos_vel_variables->rcac_vel_theta_2 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_2(msg);
    rcac_pos_vel_variables->rcac_vel_theta_3 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_3(msg);
    rcac_pos_vel_variables->rcac_vel_theta_4 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_4(msg);
    rcac_pos_vel_variables->rcac_vel_theta_5 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_5(msg);
    rcac_pos_vel_variables->rcac_vel_theta_6 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_6(msg);
    rcac_pos_vel_variables->rcac_vel_theta_7 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_7(msg);
    rcac_pos_vel_variables->rcac_vel_theta_8 = mavlink_msg_rcac_pos_vel_variables_get_rcac_vel_theta_8(msg);
    rcac_pos_vel_variables->px4_ol_theta_0 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_0(msg);
    rcac_pos_vel_variables->px4_ol_theta_1 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_1(msg);
    rcac_pos_vel_variables->px4_ol_theta_2 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_2(msg);
    rcac_pos_vel_variables->px4_ol_theta_3 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_3(msg);
    rcac_pos_vel_variables->px4_ol_theta_4 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_4(msg);
    rcac_pos_vel_variables->px4_ol_theta_5 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_5(msg);
    rcac_pos_vel_variables->px4_ol_theta_6 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_6(msg);
    rcac_pos_vel_variables->px4_ol_theta_7 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_7(msg);
    rcac_pos_vel_variables->px4_ol_theta_8 = mavlink_msg_rcac_pos_vel_variables_get_px4_ol_theta_8(msg);
    rcac_pos_vel_variables->p11_pos = mavlink_msg_rcac_pos_vel_variables_get_p11_pos(msg);
    rcac_pos_vel_variables->p11_velx = mavlink_msg_rcac_pos_vel_variables_get_p11_velx(msg);
    rcac_pos_vel_variables->switch_pos = mavlink_msg_rcac_pos_vel_variables_get_switch_pos(msg);
    rcac_pos_vel_variables->switch_vel = mavlink_msg_rcac_pos_vel_variables_get_switch_vel(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN? msg->len : MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN;
        memset(rcac_pos_vel_variables, 0, MAVLINK_MSG_ID_RCAC_POS_VEL_VARIABLES_LEN);
    memcpy(rcac_pos_vel_variables, _MAV_PAYLOAD(msg), len);
#endif
}
