#pragma once
// MESSAGE RCAC_ATT_RATE_VARIABLES PACKING

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES 10001


typedef struct __mavlink_rcac_att_rate_variables_t {
 uint64_t timestamp; /*<  Time since system start*/
 uint64_t ii_att; /*<  iteration step of the RCAC Attitude Controller*/
 uint64_t ii_rate; /*<  iteration step of the RCAC Rate Controller*/
 float rcac_att_z[3]; /*<  Performance variable for the Attitude Controller*/
 float rcac_att_u[3]; /*<  Control generated by the Attitude Controller*/
 float rcac_att_theta[3]; /*<  P gains for the Attitude Controller*/
 float rcac_rate_z[3]; /*<  Performance variable for the Rate Controller*/
 float rcac_rate_u[3]; /*<  Control generated by the Rate Controller*/
 float rcac_rate_theta[12]; /*<  PID+FF gains for the Rate Controller*/
 float px4_att_theta[3]; /*<  P gains for the PX4 Attitude Controller*/
 float px4_rate_theta[12]; /*<  P gains for the PX4 Rate Controller*/
 float p11_att; /*<  P(1,1) of the RCAC Attitude Controller*/
 float p11_ratex; /*<  P(1,1) of the RCAC Rate Controller*/
 uint8_t switch_att; /*<  RCAC Att Controller switch*/
 uint8_t switch_rate; /*<  RCAC Rate Controller switch*/
} mavlink_rcac_att_rate_variables_t;

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN 202
#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN 202
#define MAVLINK_MSG_ID_10001_LEN 202
#define MAVLINK_MSG_ID_10001_MIN_LEN 202

#define MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC 55
#define MAVLINK_MSG_ID_10001_CRC 55

#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_ATT_Z_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_ATT_U_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_ATT_THETA_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_RATE_Z_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_RATE_U_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_RCAC_RATE_THETA_LEN 12
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_PX4_ATT_THETA_LEN 3
#define MAVLINK_MSG_RCAC_ATT_RATE_VARIABLES_FIELD_PX4_RATE_THETA_LEN 12

#if MAVLINK_COMMAND_24BIT
#define MAVLINK_MESSAGE_INFO_RCAC_ATT_RATE_VARIABLES { \
    10001, \
    "RCAC_ATT_RATE_VARIABLES", \
    15, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_att_rate_variables_t, timestamp) }, \
         { "ii_att", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_att_rate_variables_t, ii_att) }, \
         { "switch_att", NULL, MAVLINK_TYPE_UINT8_T, 0, 200, offsetof(mavlink_rcac_att_rate_variables_t, switch_att) }, \
         { "rcac_att_z", NULL, MAVLINK_TYPE_FLOAT, 3, 24, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z) }, \
         { "rcac_att_u", NULL, MAVLINK_TYPE_FLOAT, 3, 36, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u) }, \
         { "rcac_att_theta", NULL, MAVLINK_TYPE_FLOAT, 3, 48, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta) }, \
         { "ii_rate", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_att_rate_variables_t, ii_rate) }, \
         { "switch_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 201, offsetof(mavlink_rcac_att_rate_variables_t, switch_rate) }, \
         { "rcac_rate_z", NULL, MAVLINK_TYPE_FLOAT, 3, 60, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z) }, \
         { "rcac_rate_u", NULL, MAVLINK_TYPE_FLOAT, 3, 72, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u) }, \
         { "rcac_rate_theta", NULL, MAVLINK_TYPE_FLOAT, 12, 84, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta) }, \
         { "px4_att_theta", NULL, MAVLINK_TYPE_FLOAT, 3, 132, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta) }, \
         { "px4_rate_theta", NULL, MAVLINK_TYPE_FLOAT, 12, 144, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta) }, \
         { "p11_att", NULL, MAVLINK_TYPE_FLOAT, 0, 192, offsetof(mavlink_rcac_att_rate_variables_t, p11_att) }, \
         { "p11_ratex", NULL, MAVLINK_TYPE_FLOAT, 0, 196, offsetof(mavlink_rcac_att_rate_variables_t, p11_ratex) }, \
         } \
}
#else
#define MAVLINK_MESSAGE_INFO_RCAC_ATT_RATE_VARIABLES { \
    "RCAC_ATT_RATE_VARIABLES", \
    15, \
    {  { "timestamp", NULL, MAVLINK_TYPE_UINT64_T, 0, 0, offsetof(mavlink_rcac_att_rate_variables_t, timestamp) }, \
         { "ii_att", NULL, MAVLINK_TYPE_UINT64_T, 0, 8, offsetof(mavlink_rcac_att_rate_variables_t, ii_att) }, \
         { "switch_att", NULL, MAVLINK_TYPE_UINT8_T, 0, 200, offsetof(mavlink_rcac_att_rate_variables_t, switch_att) }, \
         { "rcac_att_z", NULL, MAVLINK_TYPE_FLOAT, 3, 24, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_z) }, \
         { "rcac_att_u", NULL, MAVLINK_TYPE_FLOAT, 3, 36, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_u) }, \
         { "rcac_att_theta", NULL, MAVLINK_TYPE_FLOAT, 3, 48, offsetof(mavlink_rcac_att_rate_variables_t, rcac_att_theta) }, \
         { "ii_rate", NULL, MAVLINK_TYPE_UINT64_T, 0, 16, offsetof(mavlink_rcac_att_rate_variables_t, ii_rate) }, \
         { "switch_rate", NULL, MAVLINK_TYPE_UINT8_T, 0, 201, offsetof(mavlink_rcac_att_rate_variables_t, switch_rate) }, \
         { "rcac_rate_z", NULL, MAVLINK_TYPE_FLOAT, 3, 60, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_z) }, \
         { "rcac_rate_u", NULL, MAVLINK_TYPE_FLOAT, 3, 72, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_u) }, \
         { "rcac_rate_theta", NULL, MAVLINK_TYPE_FLOAT, 12, 84, offsetof(mavlink_rcac_att_rate_variables_t, rcac_rate_theta) }, \
         { "px4_att_theta", NULL, MAVLINK_TYPE_FLOAT, 3, 132, offsetof(mavlink_rcac_att_rate_variables_t, px4_att_theta) }, \
         { "px4_rate_theta", NULL, MAVLINK_TYPE_FLOAT, 12, 144, offsetof(mavlink_rcac_att_rate_variables_t, px4_rate_theta) }, \
         { "p11_att", NULL, MAVLINK_TYPE_FLOAT, 0, 192, offsetof(mavlink_rcac_att_rate_variables_t, p11_att) }, \
         { "p11_ratex", NULL, MAVLINK_TYPE_FLOAT, 0, 196, offsetof(mavlink_rcac_att_rate_variables_t, p11_ratex) }, \
         } \
}
#endif

/**
 * @brief Pack a rcac_att_rate_variables message
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 *
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param rcac_att_z  Performance variable for the Attitude Controller
 * @param rcac_att_u  Control generated by the Attitude Controller
 * @param rcac_att_theta  P gains for the Attitude Controller
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param rcac_rate_z  Performance variable for the Rate Controller
 * @param rcac_rate_u  Control generated by the Rate Controller
 * @param rcac_rate_theta  PID+FF gains for the Rate Controller
 * @param px4_att_theta  P gains for the PX4 Attitude Controller
 * @param px4_rate_theta  P gains for the PX4 Rate Controller
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
                               uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, const float *rcac_att_z, const float *rcac_att_u, const float *rcac_att_theta, uint64_t ii_rate, uint8_t switch_rate, const float *rcac_rate_z, const float *rcac_rate_u, const float *rcac_rate_theta, const float *px4_att_theta, const float *px4_rate_theta, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 192, p11_att);
    _mav_put_float(buf, 196, p11_ratex);
    _mav_put_uint8_t(buf, 200, switch_att);
    _mav_put_uint8_t(buf, 201, switch_rate);
    _mav_put_float_array(buf, 24, rcac_att_z, 3);
    _mav_put_float_array(buf, 36, rcac_att_u, 3);
    _mav_put_float_array(buf, 48, rcac_att_theta, 3);
    _mav_put_float_array(buf, 60, rcac_rate_z, 3);
    _mav_put_float_array(buf, 72, rcac_rate_u, 3);
    _mav_put_float_array(buf, 84, rcac_rate_theta, 12);
    _mav_put_float_array(buf, 132, px4_att_theta, 3);
    _mav_put_float_array(buf, 144, px4_rate_theta, 12);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;
    mav_array_memcpy(packet.rcac_att_z, rcac_att_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_u, rcac_att_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_theta, rcac_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_z, rcac_rate_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_u, rcac_rate_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_theta, rcac_rate_theta, sizeof(float)*12);
    mav_array_memcpy(packet.px4_att_theta, px4_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.px4_rate_theta, px4_rate_theta, sizeof(float)*12);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES;
    return mavlink_finalize_message(msg, system_id, component_id, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
}

/**
 * @brief Pack a rcac_att_rate_variables message on a channel
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param rcac_att_z  Performance variable for the Attitude Controller
 * @param rcac_att_u  Control generated by the Attitude Controller
 * @param rcac_att_theta  P gains for the Attitude Controller
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param rcac_rate_z  Performance variable for the Rate Controller
 * @param rcac_rate_u  Control generated by the Rate Controller
 * @param rcac_rate_theta  PID+FF gains for the Rate Controller
 * @param px4_att_theta  P gains for the PX4 Attitude Controller
 * @param px4_rate_theta  P gains for the PX4 Rate Controller
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 * @return length of the message in bytes (excluding serial stream start sign)
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                               mavlink_message_t* msg,
                                   uint64_t timestamp,uint64_t ii_att,uint8_t switch_att,const float *rcac_att_z,const float *rcac_att_u,const float *rcac_att_theta,uint64_t ii_rate,uint8_t switch_rate,const float *rcac_rate_z,const float *rcac_rate_u,const float *rcac_rate_theta,const float *px4_att_theta,const float *px4_rate_theta,float p11_att,float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 192, p11_att);
    _mav_put_float(buf, 196, p11_ratex);
    _mav_put_uint8_t(buf, 200, switch_att);
    _mav_put_uint8_t(buf, 201, switch_rate);
    _mav_put_float_array(buf, 24, rcac_att_z, 3);
    _mav_put_float_array(buf, 36, rcac_att_u, 3);
    _mav_put_float_array(buf, 48, rcac_att_theta, 3);
    _mav_put_float_array(buf, 60, rcac_rate_z, 3);
    _mav_put_float_array(buf, 72, rcac_rate_u, 3);
    _mav_put_float_array(buf, 84, rcac_rate_theta, 12);
    _mav_put_float_array(buf, 132, px4_att_theta, 3);
    _mav_put_float_array(buf, 144, px4_rate_theta, 12);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;
    mav_array_memcpy(packet.rcac_att_z, rcac_att_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_u, rcac_att_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_theta, rcac_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_z, rcac_rate_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_u, rcac_rate_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_theta, rcac_rate_theta, sizeof(float)*12);
    mav_array_memcpy(packet.px4_att_theta, px4_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.px4_rate_theta, px4_rate_theta, sizeof(float)*12);
        memcpy(_MAV_PAYLOAD_NON_CONST(msg), &packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
#endif

    msg->msgid = MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES;
    return mavlink_finalize_message_chan(msg, system_id, component_id, chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
}

/**
 * @brief Encode a rcac_att_rate_variables struct
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param msg The MAVLink message to compress the data into
 * @param rcac_att_rate_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_encode(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
    return mavlink_msg_rcac_att_rate_variables_pack(system_id, component_id, msg, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->rcac_att_z, rcac_att_rate_variables->rcac_att_u, rcac_att_rate_variables->rcac_att_theta, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->rcac_rate_z, rcac_att_rate_variables->rcac_rate_u, rcac_att_rate_variables->rcac_rate_theta, rcac_att_rate_variables->px4_att_theta, rcac_att_rate_variables->px4_rate_theta, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
}

/**
 * @brief Encode a rcac_att_rate_variables struct on a channel
 *
 * @param system_id ID of this system
 * @param component_id ID of this component (e.g. 200 for IMU)
 * @param chan The MAVLink channel this message will be sent over
 * @param msg The MAVLink message to compress the data into
 * @param rcac_att_rate_variables C-struct to read the message contents from
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_encode_chan(uint8_t system_id, uint8_t component_id, uint8_t chan, mavlink_message_t* msg, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
    return mavlink_msg_rcac_att_rate_variables_pack_chan(system_id, component_id, chan, msg, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->rcac_att_z, rcac_att_rate_variables->rcac_att_u, rcac_att_rate_variables->rcac_att_theta, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->rcac_rate_z, rcac_att_rate_variables->rcac_rate_u, rcac_att_rate_variables->rcac_rate_theta, rcac_att_rate_variables->px4_att_theta, rcac_att_rate_variables->px4_rate_theta, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
}

/**
 * @brief Send a rcac_att_rate_variables message
 * @param chan MAVLink channel to send the message
 *
 * @param timestamp  Time since system start
 * @param ii_att  iteration step of the RCAC Attitude Controller
 * @param switch_att  RCAC Att Controller switch
 * @param rcac_att_z  Performance variable for the Attitude Controller
 * @param rcac_att_u  Control generated by the Attitude Controller
 * @param rcac_att_theta  P gains for the Attitude Controller
 * @param ii_rate  iteration step of the RCAC Rate Controller
 * @param switch_rate  RCAC Rate Controller switch
 * @param rcac_rate_z  Performance variable for the Rate Controller
 * @param rcac_rate_u  Control generated by the Rate Controller
 * @param rcac_rate_theta  PID+FF gains for the Rate Controller
 * @param px4_att_theta  P gains for the PX4 Attitude Controller
 * @param px4_rate_theta  P gains for the PX4 Rate Controller
 * @param p11_att  P(1,1) of the RCAC Attitude Controller
 * @param p11_ratex  P(1,1) of the RCAC Rate Controller
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rcac_att_rate_variables_send(mavlink_channel_t chan, uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, const float *rcac_att_z, const float *rcac_att_u, const float *rcac_att_theta, uint64_t ii_rate, uint8_t switch_rate, const float *rcac_rate_z, const float *rcac_rate_u, const float *rcac_rate_theta, const float *px4_att_theta, const float *px4_rate_theta, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char buf[MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN];
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 192, p11_att);
    _mav_put_float(buf, 196, p11_ratex);
    _mav_put_uint8_t(buf, 200, switch_att);
    _mav_put_uint8_t(buf, 201, switch_rate);
    _mav_put_float_array(buf, 24, rcac_att_z, 3);
    _mav_put_float_array(buf, 36, rcac_att_u, 3);
    _mav_put_float_array(buf, 48, rcac_att_theta, 3);
    _mav_put_float_array(buf, 60, rcac_rate_z, 3);
    _mav_put_float_array(buf, 72, rcac_rate_u, 3);
    _mav_put_float_array(buf, 84, rcac_rate_theta, 12);
    _mav_put_float_array(buf, 132, px4_att_theta, 3);
    _mav_put_float_array(buf, 144, px4_rate_theta, 12);
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#else
    mavlink_rcac_att_rate_variables_t packet;
    packet.timestamp = timestamp;
    packet.ii_att = ii_att;
    packet.ii_rate = ii_rate;
    packet.p11_att = p11_att;
    packet.p11_ratex = p11_ratex;
    packet.switch_att = switch_att;
    packet.switch_rate = switch_rate;
    mav_array_memcpy(packet.rcac_att_z, rcac_att_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_u, rcac_att_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_att_theta, rcac_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_z, rcac_rate_z, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_u, rcac_rate_u, sizeof(float)*3);
    mav_array_memcpy(packet.rcac_rate_theta, rcac_rate_theta, sizeof(float)*12);
    mav_array_memcpy(packet.px4_att_theta, px4_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet.px4_rate_theta, px4_rate_theta, sizeof(float)*12);
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)&packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}

/**
 * @brief Send a rcac_att_rate_variables message
 * @param chan MAVLink channel to send the message
 * @param struct The MAVLink struct to serialize
 */
static inline void mavlink_msg_rcac_att_rate_variables_send_struct(mavlink_channel_t chan, const mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    mavlink_msg_rcac_att_rate_variables_send(chan, rcac_att_rate_variables->timestamp, rcac_att_rate_variables->ii_att, rcac_att_rate_variables->switch_att, rcac_att_rate_variables->rcac_att_z, rcac_att_rate_variables->rcac_att_u, rcac_att_rate_variables->rcac_att_theta, rcac_att_rate_variables->ii_rate, rcac_att_rate_variables->switch_rate, rcac_att_rate_variables->rcac_rate_z, rcac_att_rate_variables->rcac_rate_u, rcac_att_rate_variables->rcac_rate_theta, rcac_att_rate_variables->px4_att_theta, rcac_att_rate_variables->px4_rate_theta, rcac_att_rate_variables->p11_att, rcac_att_rate_variables->p11_ratex);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)rcac_att_rate_variables, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}

#if MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN <= MAVLINK_MAX_PAYLOAD_LEN
/*
  This varient of _send() can be used to save stack space by re-using
  memory from the receive buffer.  The caller provides a
  mavlink_message_t which is the size of a full mavlink message. This
  is usually the receive buffer for the channel, and allows a reply to an
  incoming message with minimum stack space usage.
 */
static inline void mavlink_msg_rcac_att_rate_variables_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  uint64_t timestamp, uint64_t ii_att, uint8_t switch_att, const float *rcac_att_z, const float *rcac_att_u, const float *rcac_att_theta, uint64_t ii_rate, uint8_t switch_rate, const float *rcac_rate_z, const float *rcac_rate_u, const float *rcac_rate_theta, const float *px4_att_theta, const float *px4_rate_theta, float p11_att, float p11_ratex)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    char *buf = (char *)msgbuf;
    _mav_put_uint64_t(buf, 0, timestamp);
    _mav_put_uint64_t(buf, 8, ii_att);
    _mav_put_uint64_t(buf, 16, ii_rate);
    _mav_put_float(buf, 192, p11_att);
    _mav_put_float(buf, 196, p11_ratex);
    _mav_put_uint8_t(buf, 200, switch_att);
    _mav_put_uint8_t(buf, 201, switch_rate);
    _mav_put_float_array(buf, 24, rcac_att_z, 3);
    _mav_put_float_array(buf, 36, rcac_att_u, 3);
    _mav_put_float_array(buf, 48, rcac_att_theta, 3);
    _mav_put_float_array(buf, 60, rcac_rate_z, 3);
    _mav_put_float_array(buf, 72, rcac_rate_u, 3);
    _mav_put_float_array(buf, 84, rcac_rate_theta, 12);
    _mav_put_float_array(buf, 132, px4_att_theta, 3);
    _mav_put_float_array(buf, 144, px4_rate_theta, 12);
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, buf, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#else
    mavlink_rcac_att_rate_variables_t *packet = (mavlink_rcac_att_rate_variables_t *)msgbuf;
    packet->timestamp = timestamp;
    packet->ii_att = ii_att;
    packet->ii_rate = ii_rate;
    packet->p11_att = p11_att;
    packet->p11_ratex = p11_ratex;
    packet->switch_att = switch_att;
    packet->switch_rate = switch_rate;
    mav_array_memcpy(packet->rcac_att_z, rcac_att_z, sizeof(float)*3);
    mav_array_memcpy(packet->rcac_att_u, rcac_att_u, sizeof(float)*3);
    mav_array_memcpy(packet->rcac_att_theta, rcac_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet->rcac_rate_z, rcac_rate_z, sizeof(float)*3);
    mav_array_memcpy(packet->rcac_rate_u, rcac_rate_u, sizeof(float)*3);
    mav_array_memcpy(packet->rcac_rate_theta, rcac_rate_theta, sizeof(float)*12);
    mav_array_memcpy(packet->px4_att_theta, px4_att_theta, sizeof(float)*3);
    mav_array_memcpy(packet->px4_rate_theta, px4_rate_theta, sizeof(float)*12);
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES, (const char *)packet, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_MIN_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_CRC);
#endif
}
#endif

#endif

// MESSAGE RCAC_ATT_RATE_VARIABLES UNPACKING


/**
 * @brief Get field timestamp from rcac_att_rate_variables message
 *
 * @return  Time since system start
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_timestamp(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  0);
}

/**
 * @brief Get field ii_att from rcac_att_rate_variables message
 *
 * @return  iteration step of the RCAC Attitude Controller
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_ii_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  8);
}

/**
 * @brief Get field switch_att from rcac_att_rate_variables message
 *
 * @return  RCAC Att Controller switch
 */
static inline uint8_t mavlink_msg_rcac_att_rate_variables_get_switch_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  200);
}

/**
 * @brief Get field rcac_att_z from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Attitude Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_att_z(const mavlink_message_t* msg, float *rcac_att_z)
{
    return _MAV_RETURN_float_array(msg, rcac_att_z, 3,  24);
}

/**
 * @brief Get field rcac_att_u from rcac_att_rate_variables message
 *
 * @return  Control generated by the Attitude Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_att_u(const mavlink_message_t* msg, float *rcac_att_u)
{
    return _MAV_RETURN_float_array(msg, rcac_att_u, 3,  36);
}

/**
 * @brief Get field rcac_att_theta from rcac_att_rate_variables message
 *
 * @return  P gains for the Attitude Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta(const mavlink_message_t* msg, float *rcac_att_theta)
{
    return _MAV_RETURN_float_array(msg, rcac_att_theta, 3,  48);
}

/**
 * @brief Get field ii_rate from rcac_att_rate_variables message
 *
 * @return  iteration step of the RCAC Rate Controller
 */
static inline uint64_t mavlink_msg_rcac_att_rate_variables_get_ii_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint64_t(msg,  16);
}

/**
 * @brief Get field switch_rate from rcac_att_rate_variables message
 *
 * @return  RCAC Rate Controller switch
 */
static inline uint8_t mavlink_msg_rcac_att_rate_variables_get_switch_rate(const mavlink_message_t* msg)
{
    return _MAV_RETURN_uint8_t(msg,  201);
}

/**
 * @brief Get field rcac_rate_z from rcac_att_rate_variables message
 *
 * @return  Performance variable for the Rate Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z(const mavlink_message_t* msg, float *rcac_rate_z)
{
    return _MAV_RETURN_float_array(msg, rcac_rate_z, 3,  60);
}

/**
 * @brief Get field rcac_rate_u from rcac_att_rate_variables message
 *
 * @return  Control generated by the Rate Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u(const mavlink_message_t* msg, float *rcac_rate_u)
{
    return _MAV_RETURN_float_array(msg, rcac_rate_u, 3,  72);
}

/**
 * @brief Get field rcac_rate_theta from rcac_att_rate_variables message
 *
 * @return  PID+FF gains for the Rate Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta(const mavlink_message_t* msg, float *rcac_rate_theta)
{
    return _MAV_RETURN_float_array(msg, rcac_rate_theta, 12,  84);
}

/**
 * @brief Get field px4_att_theta from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Attitude Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_px4_att_theta(const mavlink_message_t* msg, float *px4_att_theta)
{
    return _MAV_RETURN_float_array(msg, px4_att_theta, 3,  132);
}

/**
 * @brief Get field px4_rate_theta from rcac_att_rate_variables message
 *
 * @return  P gains for the PX4 Rate Controller
 */
static inline uint16_t mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta(const mavlink_message_t* msg, float *px4_rate_theta)
{
    return _MAV_RETURN_float_array(msg, px4_rate_theta, 12,  144);
}

/**
 * @brief Get field p11_att from rcac_att_rate_variables message
 *
 * @return  P(1,1) of the RCAC Attitude Controller
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_p11_att(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  192);
}

/**
 * @brief Get field p11_ratex from rcac_att_rate_variables message
 *
 * @return  P(1,1) of the RCAC Rate Controller
 */
static inline float mavlink_msg_rcac_att_rate_variables_get_p11_ratex(const mavlink_message_t* msg)
{
    return _MAV_RETURN_float(msg,  196);
}

/**
 * @brief Decode a rcac_att_rate_variables message into a struct
 *
 * @param msg The message to decode
 * @param rcac_att_rate_variables C-struct to decode the message contents into
 */
static inline void mavlink_msg_rcac_att_rate_variables_decode(const mavlink_message_t* msg, mavlink_rcac_att_rate_variables_t* rcac_att_rate_variables)
{
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
    rcac_att_rate_variables->timestamp = mavlink_msg_rcac_att_rate_variables_get_timestamp(msg);
    rcac_att_rate_variables->ii_att = mavlink_msg_rcac_att_rate_variables_get_ii_att(msg);
    rcac_att_rate_variables->ii_rate = mavlink_msg_rcac_att_rate_variables_get_ii_rate(msg);
    mavlink_msg_rcac_att_rate_variables_get_rcac_att_z(msg, rcac_att_rate_variables->rcac_att_z);
    mavlink_msg_rcac_att_rate_variables_get_rcac_att_u(msg, rcac_att_rate_variables->rcac_att_u);
    mavlink_msg_rcac_att_rate_variables_get_rcac_att_theta(msg, rcac_att_rate_variables->rcac_att_theta);
    mavlink_msg_rcac_att_rate_variables_get_rcac_rate_z(msg, rcac_att_rate_variables->rcac_rate_z);
    mavlink_msg_rcac_att_rate_variables_get_rcac_rate_u(msg, rcac_att_rate_variables->rcac_rate_u);
    mavlink_msg_rcac_att_rate_variables_get_rcac_rate_theta(msg, rcac_att_rate_variables->rcac_rate_theta);
    mavlink_msg_rcac_att_rate_variables_get_px4_att_theta(msg, rcac_att_rate_variables->px4_att_theta);
    mavlink_msg_rcac_att_rate_variables_get_px4_rate_theta(msg, rcac_att_rate_variables->px4_rate_theta);
    rcac_att_rate_variables->p11_att = mavlink_msg_rcac_att_rate_variables_get_p11_att(msg);
    rcac_att_rate_variables->p11_ratex = mavlink_msg_rcac_att_rate_variables_get_p11_ratex(msg);
    rcac_att_rate_variables->switch_att = mavlink_msg_rcac_att_rate_variables_get_switch_att(msg);
    rcac_att_rate_variables->switch_rate = mavlink_msg_rcac_att_rate_variables_get_switch_rate(msg);
#else
        uint8_t len = msg->len < MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN? msg->len : MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN;
        memset(rcac_att_rate_variables, 0, MAVLINK_MSG_ID_RCAC_ATT_RATE_VARIABLES_LEN);
    memcpy(rcac_att_rate_variables, _MAV_PAYLOAD(msg), len);
#endif
}
